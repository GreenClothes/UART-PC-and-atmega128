
Term_prj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00001206  0000129a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001206  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015a  008001a6  008001a6  00001340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024a6  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa6  00000000  00000000  000039ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000133a  00000000  00000000  00004470  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  000057ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000875  00000000  00000000  00005c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c9  00000000  00000000  000064e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00007baa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c5       	rjmp	.+2736   	; 0xac6 <__vector_5>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	24 c5       	rjmp	.+2632   	; 0xa72 <__vector_10>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	22 c3       	rjmp	.+1604   	; 0x686 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	9f c2       	rjmp	.+1342   	; 0x5b8 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e0       	ldi	r30, 0x06	; 6
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3a       	cpi	r26, 0xA6	; 166
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a6 ea       	ldi	r26, 0xA6	; 166
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 30       	cpi	r26, 0x00	; 0
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	54 d6       	rcall	.+3240   	; 0xd6c <main>
      c4:	0c 94 01 09 	jmp	0x1202	; 0x1202 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <LCD_Data>:
uint16_t Pulse_WidthIndex;
uint8_t INSPECTION_command = 24;
unsigned char OPEN = 0;

void Timer_Init(){
	TIMSK |= (1<<TOIE2);
      ca:	e5 e6       	ldi	r30, 0x65	; 101
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	90 81       	ld	r25, Z
      d0:	94 60       	ori	r25, 0x04	; 4
      d2:	90 83       	st	Z, r25
      d4:	90 81       	ld	r25, Z
      d6:	9d 7f       	andi	r25, 0xFD	; 253
      d8:	90 83       	st	Z, r25
      da:	90 81       	ld	r25, Z
      dc:	91 60       	ori	r25, 0x01	; 1
      de:	90 83       	st	Z, r25
      e0:	96 ef       	ldi	r25, 0xF6	; 246
      e2:	9a 95       	dec	r25
      e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_Data+0x18>
      e6:	8b bb       	out	0x1b, r24	; 27
      e8:	86 ef       	ldi	r24, 0xF6	; 246
      ea:	8a 95       	dec	r24
      ec:	f1 f7       	brne	.-4      	; 0xea <LCD_Data+0x20>
      ee:	80 81       	ld	r24, Z
      f0:	8e 7f       	andi	r24, 0xFE	; 254
      f2:	80 83       	st	Z, r24
      f4:	08 95       	ret

000000f6 <LCD_Comm>:
      f6:	e5 e6       	ldi	r30, 0x65	; 101
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	90 81       	ld	r25, Z
      fc:	9b 7f       	andi	r25, 0xFB	; 251
      fe:	90 83       	st	Z, r25
     100:	90 81       	ld	r25, Z
     102:	9d 7f       	andi	r25, 0xFD	; 253
     104:	90 83       	st	Z, r25
     106:	90 81       	ld	r25, Z
     108:	91 60       	ori	r25, 0x01	; 1
     10a:	90 83       	st	Z, r25
     10c:	96 ef       	ldi	r25, 0xF6	; 246
     10e:	9a 95       	dec	r25
     110:	f1 f7       	brne	.-4      	; 0x10e <LCD_Comm+0x18>
     112:	8b bb       	out	0x1b, r24	; 27
     114:	86 ef       	ldi	r24, 0xF6	; 246
     116:	8a 95       	dec	r24
     118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Comm+0x20>
     11a:	80 81       	ld	r24, Z
     11c:	8e 7f       	andi	r24, 0xFE	; 254
     11e:	80 83       	st	Z, r24
     120:	08 95       	ret

00000122 <LCD_Delay>:
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	07 c0       	rjmp	.+14     	; 0x136 <LCD_Delay+0x14>
     128:	e6 e6       	ldi	r30, 0x66	; 102
     12a:	fe e0       	ldi	r31, 0x0E	; 14
     12c:	31 97       	sbiw	r30, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_Delay+0xa>
     130:	00 00       	nop
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	48 2f       	mov	r20, r24
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	24 17       	cp	r18, r20
     13c:	35 07       	cpc	r19, r21
     13e:	a4 f3       	brlt	.-24     	; 0x128 <LCD_Delay+0x6>
     140:	08 95       	ret

00000142 <LCD_Char>:
     142:	cf 93       	push	r28
     144:	c8 2f       	mov	r28, r24
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	ec df       	rcall	.-40     	; 0x122 <LCD_Delay>
     14a:	8c 2f       	mov	r24, r28
     14c:	be df       	rcall	.-132    	; 0xca <LCD_Data>
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <LCD_Str>:
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	ec 01       	movw	r28, r24
     158:	02 c0       	rjmp	.+4      	; 0x15e <LCD_Str+0xc>
     15a:	f3 df       	rcall	.-26     	; 0x142 <LCD_Char>
     15c:	21 96       	adiw	r28, 0x01	; 1
     15e:	88 81       	ld	r24, Y
     160:	81 11       	cpse	r24, r1
     162:	fb cf       	rjmp	.-10     	; 0x15a <LCD_Str+0x8>
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <LCD_Pos>:
     16a:	90 e4       	ldi	r25, 0x40	; 64
     16c:	89 9f       	mul	r24, r25
     16e:	60 0d       	add	r22, r0
     170:	11 24       	eor	r1, r1
     172:	86 2f       	mov	r24, r22
     174:	80 68       	ori	r24, 0x80	; 128
     176:	bf cf       	rjmp	.-130    	; 0xf6 <LCD_Comm>
     178:	08 95       	ret

0000017a <LCD_Clear>:
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	bc df       	rcall	.-136    	; 0xf6 <LCD_Comm>
     17e:	82 e0       	ldi	r24, 0x02	; 2
     180:	d0 cf       	rjmp	.-96     	; 0x122 <LCD_Delay>
     182:	08 95       	ret

00000184 <LCD_PORT_Init>:
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	8a bb       	out	0x1a, r24	; 26
     188:	e4 e6       	ldi	r30, 0x64	; 100
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	8f 60       	ori	r24, 0x0F	; 15
     190:	80 83       	st	Z, r24
     192:	08 95       	ret

00000194 <LCD_Init>:
     194:	f7 df       	rcall	.-18     	; 0x184 <LCD_PORT_Init>
     196:	88 e3       	ldi	r24, 0x38	; 56
     198:	ae df       	rcall	.-164    	; 0xf6 <LCD_Comm>
     19a:	84 e0       	ldi	r24, 0x04	; 4
     19c:	c2 df       	rcall	.-124    	; 0x122 <LCD_Delay>
     19e:	88 e3       	ldi	r24, 0x38	; 56
     1a0:	aa df       	rcall	.-172    	; 0xf6 <LCD_Comm>
     1a2:	84 e0       	ldi	r24, 0x04	; 4
     1a4:	be df       	rcall	.-132    	; 0x122 <LCD_Delay>
     1a6:	88 e3       	ldi	r24, 0x38	; 56
     1a8:	a6 df       	rcall	.-180    	; 0xf6 <LCD_Comm>
     1aa:	84 e0       	ldi	r24, 0x04	; 4
     1ac:	ba df       	rcall	.-140    	; 0x122 <LCD_Delay>
     1ae:	8e e0       	ldi	r24, 0x0E	; 14
     1b0:	a2 df       	rcall	.-188    	; 0xf6 <LCD_Comm>
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	b6 df       	rcall	.-148    	; 0x122 <LCD_Delay>
     1b6:	86 e0       	ldi	r24, 0x06	; 6
     1b8:	9e df       	rcall	.-196    	; 0xf6 <LCD_Comm>
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	b2 df       	rcall	.-156    	; 0x122 <LCD_Delay>
     1be:	dd cf       	rjmp	.-70     	; 0x17a <LCD_Clear>
     1c0:	08 95       	ret

000001c2 <CGRAM_Set>:
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	ac df       	rcall	.-168    	; 0x122 <LCD_Delay>
     1ca:	80 e4       	ldi	r24, 0x40	; 64
     1cc:	94 df       	rcall	.-216    	; 0xf6 <LCD_Comm>
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	a8 df       	rcall	.-176    	; 0x122 <LCD_Delay>
     1d2:	c0 e0       	ldi	r28, 0x00	; 0
     1d4:	d0 e0       	ldi	r29, 0x00	; 0
     1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <CGRAM_Set+0x26>
     1d8:	fe 01       	movw	r30, r28
     1da:	e4 5d       	subi	r30, 0xD4	; 212
     1dc:	fe 4f       	sbci	r31, 0xFE	; 254
     1de:	80 81       	ld	r24, Z
     1e0:	74 df       	rcall	.-280    	; 0xca <LCD_Data>
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	9e df       	rcall	.-196    	; 0x122 <LCD_Delay>
     1e6:	21 96       	adiw	r28, 0x01	; 1
     1e8:	c8 30       	cpi	r28, 0x08	; 8
     1ea:	d1 05       	cpc	r29, r1
     1ec:	ac f3       	brlt	.-22     	; 0x1d8 <CGRAM_Set+0x16>
     1ee:	88 e4       	ldi	r24, 0x48	; 72
     1f0:	82 df       	rcall	.-252    	; 0xf6 <LCD_Comm>
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	96 df       	rcall	.-212    	; 0x122 <LCD_Delay>
     1f6:	c0 e0       	ldi	r28, 0x00	; 0
     1f8:	d0 e0       	ldi	r29, 0x00	; 0
     1fa:	08 c0       	rjmp	.+16     	; 0x20c <CGRAM_Set+0x4a>
     1fc:	fe 01       	movw	r30, r28
     1fe:	ec 5c       	subi	r30, 0xCC	; 204
     200:	fe 4f       	sbci	r31, 0xFE	; 254
     202:	80 81       	ld	r24, Z
     204:	62 df       	rcall	.-316    	; 0xca <LCD_Data>
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	8c df       	rcall	.-232    	; 0x122 <LCD_Delay>
     20a:	21 96       	adiw	r28, 0x01	; 1
     20c:	c8 30       	cpi	r28, 0x08	; 8
     20e:	d1 05       	cpc	r29, r1
     210:	ac f3       	brlt	.-22     	; 0x1fc <CGRAM_Set+0x3a>
     212:	80 e5       	ldi	r24, 0x50	; 80
     214:	70 df       	rcall	.-288    	; 0xf6 <LCD_Comm>
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	84 df       	rcall	.-248    	; 0x122 <LCD_Delay>
     21a:	c0 e0       	ldi	r28, 0x00	; 0
     21c:	d0 e0       	ldi	r29, 0x00	; 0
     21e:	08 c0       	rjmp	.+16     	; 0x230 <CGRAM_Set+0x6e>
     220:	fe 01       	movw	r30, r28
     222:	ec 5d       	subi	r30, 0xDC	; 220
     224:	fe 4f       	sbci	r31, 0xFE	; 254
     226:	80 81       	ld	r24, Z
     228:	50 df       	rcall	.-352    	; 0xca <LCD_Data>
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	7a df       	rcall	.-268    	; 0x122 <LCD_Delay>
     22e:	21 96       	adiw	r28, 0x01	; 1
     230:	c8 30       	cpi	r28, 0x08	; 8
     232:	d1 05       	cpc	r29, r1
     234:	ac f3       	brlt	.-22     	; 0x220 <CGRAM_Set+0x5e>
     236:	88 e5       	ldi	r24, 0x58	; 88
     238:	5e df       	rcall	.-324    	; 0xf6 <LCD_Comm>
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	72 df       	rcall	.-284    	; 0x122 <LCD_Delay>
     23e:	c0 e0       	ldi	r28, 0x00	; 0
     240:	d0 e0       	ldi	r29, 0x00	; 0
     242:	08 c0       	rjmp	.+16     	; 0x254 <CGRAM_Set+0x92>
     244:	fe 01       	movw	r30, r28
     246:	ec 5e       	subi	r30, 0xEC	; 236
     248:	fe 4f       	sbci	r31, 0xFE	; 254
     24a:	80 81       	ld	r24, Z
     24c:	3e df       	rcall	.-388    	; 0xca <LCD_Data>
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	68 df       	rcall	.-304    	; 0x122 <LCD_Delay>
     252:	21 96       	adiw	r28, 0x01	; 1
     254:	c8 30       	cpi	r28, 0x08	; 8
     256:	d1 05       	cpc	r29, r1
     258:	ac f3       	brlt	.-22     	; 0x244 <CGRAM_Set+0x82>
     25a:	80 e6       	ldi	r24, 0x60	; 96
     25c:	4c df       	rcall	.-360    	; 0xf6 <LCD_Comm>
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	60 df       	rcall	.-320    	; 0x122 <LCD_Delay>
     262:	c0 e0       	ldi	r28, 0x00	; 0
     264:	d0 e0       	ldi	r29, 0x00	; 0
     266:	08 c0       	rjmp	.+16     	; 0x278 <CGRAM_Set+0xb6>
     268:	fe 01       	movw	r30, r28
     26a:	e4 5e       	subi	r30, 0xE4	; 228
     26c:	fe 4f       	sbci	r31, 0xFE	; 254
     26e:	80 81       	ld	r24, Z
     270:	2c df       	rcall	.-424    	; 0xca <LCD_Data>
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	56 df       	rcall	.-340    	; 0x122 <LCD_Delay>
     276:	21 96       	adiw	r28, 0x01	; 1
     278:	c8 30       	cpi	r28, 0x08	; 8
     27a:	d1 05       	cpc	r29, r1
     27c:	ac f3       	brlt	.-22     	; 0x268 <CGRAM_Set+0xa6>
     27e:	88 e6       	ldi	r24, 0x68	; 104
     280:	3a df       	rcall	.-396    	; 0xf6 <LCD_Comm>
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	4e df       	rcall	.-356    	; 0x122 <LCD_Delay>
     286:	c0 e0       	ldi	r28, 0x00	; 0
     288:	d0 e0       	ldi	r29, 0x00	; 0
     28a:	08 c0       	rjmp	.+16     	; 0x29c <CGRAM_Set+0xda>
     28c:	fe 01       	movw	r30, r28
     28e:	e4 5f       	subi	r30, 0xF4	; 244
     290:	fe 4f       	sbci	r31, 0xFE	; 254
     292:	80 81       	ld	r24, Z
     294:	1a df       	rcall	.-460    	; 0xca <LCD_Data>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	44 df       	rcall	.-376    	; 0x122 <LCD_Delay>
     29a:	21 96       	adiw	r28, 0x01	; 1
     29c:	c8 30       	cpi	r28, 0x08	; 8
     29e:	d1 05       	cpc	r29, r1
     2a0:	ac f3       	brlt	.-22     	; 0x28c <CGRAM_Set+0xca>
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <keyScan>:
     2a8:	cf 92       	push	r12
     2aa:	df 92       	push	r13
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	1f 93       	push	r17
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <keyScan+0x10>
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <keyScan+0x12>
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <keyScan+0x14>
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	5c df       	rcall	.-328    	; 0x17a <LCD_Clear>
     2c2:	fe 01       	movw	r30, r28
     2c4:	31 96       	adiw	r30, 0x01	; 1
     2c6:	86 e0       	ldi	r24, 0x06	; 6
     2c8:	df 01       	movw	r26, r30
     2ca:	1d 92       	st	X+, r1
     2cc:	8a 95       	dec	r24
     2ce:	e9 f7       	brne	.-6      	; 0x2ca <keyScan+0x22>
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	4a df       	rcall	.-364    	; 0x16a <LCD_Pos>
     2d6:	8c e3       	ldi	r24, 0x3C	; 60
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	3b df       	rcall	.-394    	; 0x152 <LCD_Str>
     2dc:	10 e0       	ldi	r17, 0x00	; 0
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	20 ee       	ldi	r18, 0xE0	; 224
     2e4:	25 bb       	out	0x15, r18	; 21
     2e6:	ef ef       	ldi	r30, 0xFF	; 255
     2e8:	f7 e4       	ldi	r31, 0x47	; 71
     2ea:	31 97       	sbiw	r30, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <keyScan+0x42>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <keyScan+0x48>
     2f0:	00 00       	nop
     2f2:	08 c0       	rjmp	.+16     	; 0x304 <keyScan+0x5c>
     2f4:	16 30       	cpi	r17, 0x06	; 6
     2f6:	31 f0       	breq	.+12     	; 0x304 <keyScan+0x5c>
     2f8:	e1 2f       	mov	r30, r17
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	ea 55       	subi	r30, 0x5A	; 90
     2fe:	fe 4f       	sbci	r31, 0xFE	; 254
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	80 83       	st	Z, r24
     304:	98 99       	sbic	0x13, 0	; 19
     306:	f6 cf       	rjmp	.-20     	; 0x2f4 <keyScan+0x4c>
     308:	09 c0       	rjmp	.+18     	; 0x31c <keyScan+0x74>
     30a:	16 30       	cpi	r17, 0x06	; 6
     30c:	39 f0       	breq	.+14     	; 0x31c <keyScan+0x74>
     30e:	e1 2f       	mov	r30, r17
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	ea 55       	subi	r30, 0x5A	; 90
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	80 83       	st	Z, r24
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	99 99       	sbic	0x13, 1	; 19
     31e:	f5 cf       	rjmp	.-22     	; 0x30a <keyScan+0x62>
     320:	09 c0       	rjmp	.+18     	; 0x334 <keyScan+0x8c>
     322:	16 30       	cpi	r17, 0x06	; 6
     324:	39 f0       	breq	.+14     	; 0x334 <keyScan+0x8c>
     326:	e1 2f       	mov	r30, r17
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	ea 55       	subi	r30, 0x5A	; 90
     32c:	fe 4f       	sbci	r31, 0xFE	; 254
     32e:	83 e0       	ldi	r24, 0x03	; 3
     330:	80 83       	st	Z, r24
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	9a 99       	sbic	0x13, 2	; 19
     336:	f5 cf       	rjmp	.-22     	; 0x322 <keyScan+0x7a>
     338:	20 ed       	ldi	r18, 0xD0	; 208
     33a:	25 bb       	out	0x15, r18	; 21
     33c:	af ef       	ldi	r26, 0xFF	; 255
     33e:	b7 e4       	ldi	r27, 0x47	; 71
     340:	11 97       	sbiw	r26, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <keyScan+0x98>
     344:	00 c0       	rjmp	.+0      	; 0x346 <keyScan+0x9e>
     346:	00 00       	nop
     348:	09 c0       	rjmp	.+18     	; 0x35c <keyScan+0xb4>
     34a:	16 30       	cpi	r17, 0x06	; 6
     34c:	39 f0       	breq	.+14     	; 0x35c <keyScan+0xb4>
     34e:	e1 2f       	mov	r30, r17
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	ea 55       	subi	r30, 0x5A	; 90
     354:	fe 4f       	sbci	r31, 0xFE	; 254
     356:	84 e0       	ldi	r24, 0x04	; 4
     358:	80 83       	st	Z, r24
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	98 99       	sbic	0x13, 0	; 19
     35e:	f5 cf       	rjmp	.-22     	; 0x34a <keyScan+0xa2>
     360:	09 c0       	rjmp	.+18     	; 0x374 <keyScan+0xcc>
     362:	16 30       	cpi	r17, 0x06	; 6
     364:	39 f0       	breq	.+14     	; 0x374 <keyScan+0xcc>
     366:	e1 2f       	mov	r30, r17
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	ea 55       	subi	r30, 0x5A	; 90
     36c:	fe 4f       	sbci	r31, 0xFE	; 254
     36e:	85 e0       	ldi	r24, 0x05	; 5
     370:	80 83       	st	Z, r24
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	99 99       	sbic	0x13, 1	; 19
     376:	f5 cf       	rjmp	.-22     	; 0x362 <keyScan+0xba>
     378:	09 c0       	rjmp	.+18     	; 0x38c <keyScan+0xe4>
     37a:	16 30       	cpi	r17, 0x06	; 6
     37c:	39 f0       	breq	.+14     	; 0x38c <keyScan+0xe4>
     37e:	e1 2f       	mov	r30, r17
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	ea 55       	subi	r30, 0x5A	; 90
     384:	fe 4f       	sbci	r31, 0xFE	; 254
     386:	86 e0       	ldi	r24, 0x06	; 6
     388:	80 83       	st	Z, r24
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	9a 99       	sbic	0x13, 2	; 19
     38e:	f5 cf       	rjmp	.-22     	; 0x37a <keyScan+0xd2>
     390:	20 eb       	ldi	r18, 0xB0	; 176
     392:	25 bb       	out	0x15, r18	; 21
     394:	ef ef       	ldi	r30, 0xFF	; 255
     396:	f7 e4       	ldi	r31, 0x47	; 71
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <keyScan+0xf0>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <keyScan+0xf6>
     39e:	00 00       	nop
     3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <keyScan+0x10c>
     3a2:	16 30       	cpi	r17, 0x06	; 6
     3a4:	39 f0       	breq	.+14     	; 0x3b4 <keyScan+0x10c>
     3a6:	e1 2f       	mov	r30, r17
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	ea 55       	subi	r30, 0x5A	; 90
     3ac:	fe 4f       	sbci	r31, 0xFE	; 254
     3ae:	87 e0       	ldi	r24, 0x07	; 7
     3b0:	80 83       	st	Z, r24
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	98 99       	sbic	0x13, 0	; 19
     3b6:	f5 cf       	rjmp	.-22     	; 0x3a2 <keyScan+0xfa>
     3b8:	09 c0       	rjmp	.+18     	; 0x3cc <keyScan+0x124>
     3ba:	16 30       	cpi	r17, 0x06	; 6
     3bc:	39 f0       	breq	.+14     	; 0x3cc <keyScan+0x124>
     3be:	e1 2f       	mov	r30, r17
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	ea 55       	subi	r30, 0x5A	; 90
     3c4:	fe 4f       	sbci	r31, 0xFE	; 254
     3c6:	88 e0       	ldi	r24, 0x08	; 8
     3c8:	80 83       	st	Z, r24
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	99 99       	sbic	0x13, 1	; 19
     3ce:	f5 cf       	rjmp	.-22     	; 0x3ba <keyScan+0x112>
     3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <keyScan+0x13c>
     3d2:	16 30       	cpi	r17, 0x06	; 6
     3d4:	39 f0       	breq	.+14     	; 0x3e4 <keyScan+0x13c>
     3d6:	e1 2f       	mov	r30, r17
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	ea 55       	subi	r30, 0x5A	; 90
     3dc:	fe 4f       	sbci	r31, 0xFE	; 254
     3de:	89 e0       	ldi	r24, 0x09	; 9
     3e0:	80 83       	st	Z, r24
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	9a 99       	sbic	0x13, 2	; 19
     3e6:	f5 cf       	rjmp	.-22     	; 0x3d2 <keyScan+0x12a>
     3e8:	20 e7       	ldi	r18, 0x70	; 112
     3ea:	25 bb       	out	0x15, r18	; 21
     3ec:	af ef       	ldi	r26, 0xFF	; 255
     3ee:	b7 e4       	ldi	r27, 0x47	; 71
     3f0:	11 97       	sbiw	r26, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <keyScan+0x148>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <keyScan+0x14e>
     3f6:	00 00       	nop
     3f8:	04 c0       	rjmp	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fa:	11 23       	and	r17, r17
     3fc:	11 f0       	breq	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	98 99       	sbic	0x13, 0	; 19
     404:	fa cf       	rjmp	.-12     	; 0x3fa <keyScan+0x152>
     406:	08 c0       	rjmp	.+16     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     408:	16 30       	cpi	r17, 0x06	; 6
     40a:	31 f0       	breq	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     40c:	e1 2f       	mov	r30, r17
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	ea 55       	subi	r30, 0x5A	; 90
     412:	fe 4f       	sbci	r31, 0xFE	; 254
     414:	10 82       	st	Z, r1
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	99 99       	sbic	0x13, 1	; 19
     41a:	f6 cf       	rjmp	.-20     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     41c:	03 c0       	rjmp	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     41e:	16 30       	cpi	r17, 0x06	; 6
     420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	92 e0       	ldi	r25, 0x02	; 2
     424:	9a 99       	sbic	0x13, 2	; 19
     426:	fb cf       	rjmp	.-10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     428:	91 30       	cpi	r25, 0x01	; 1
     42a:	09 f4       	brne	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	11 50       	subi	r17, 0x01	; 1
     42e:	92 30       	cpi	r25, 0x02	; 2
     430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	47 c0       	rjmp	.+142    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     434:	88 23       	and	r24, r24
     436:	09 f4       	brne	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     438:	54 cf       	rjmp	.-344    	; 0x2e2 <keyScan+0x3a>
     43a:	91 11       	cpse	r25, r1
     43c:	01 c0       	rjmp	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43e:	1f 5f       	subi	r17, 0xFF	; 255
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	10 c0       	rjmp	.+32     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     446:	fc 01       	movw	r30, r24
     448:	ea 55       	subi	r30, 0x5A	; 90
     44a:	fe 4f       	sbci	r31, 0xFE	; 254
     44c:	e0 81       	ld	r30, Z
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	ee 5f       	subi	r30, 0xFE	; 254
     452:	fe 4f       	sbci	r31, 0xFE	; 254
     454:	20 81       	ld	r18, Z
     456:	e1 e0       	ldi	r30, 0x01	; 1
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	ec 0f       	add	r30, r28
     45c:	fd 1f       	adc	r31, r29
     45e:	e8 0f       	add	r30, r24
     460:	f9 1f       	adc	r31, r25
     462:	20 83       	st	Z, r18
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	c1 2e       	mov	r12, r17
     468:	d1 2c       	mov	r13, r1
     46a:	8c 15       	cp	r24, r12
     46c:	9d 05       	cpc	r25, r13
     46e:	5c f3       	brlt	.-42     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     470:	84 de       	rcall	.-760    	; 0x17a <LCD_Clear>
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	79 de       	rcall	.-782    	; 0x16a <LCD_Pos>
     478:	8c e3       	ldi	r24, 0x3C	; 60
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	6a de       	rcall	.-812    	; 0x152 <LCD_Str>
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	73 de       	rcall	.-794    	; 0x16a <LCD_Pos>
     484:	e1 2c       	mov	r14, r1
     486:	f1 2c       	mov	r15, r1
     488:	18 c0       	rjmp	.+48     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     48a:	e1 e0       	ldi	r30, 0x01	; 1
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	ec 0f       	add	r30, r28
     490:	fd 1f       	adc	r31, r29
     492:	ee 0d       	add	r30, r14
     494:	ff 1d       	adc	r31, r15
     496:	80 81       	ld	r24, Z
     498:	54 de       	rcall	.-856    	; 0x142 <LCD_Char>
     49a:	b2 e0       	ldi	r27, 0x02	; 2
     49c:	eb 16       	cp	r14, r27
     49e:	f1 04       	cpc	r15, r1
     4a0:	19 f4       	brne	.+6      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	12 de       	rcall	.-988    	; 0xca <LCD_Data>
     4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4a8:	e5 e0       	ldi	r30, 0x05	; 5
     4aa:	ee 16       	cp	r14, r30
     4ac:	f1 04       	cpc	r15, r1
     4ae:	11 f4       	brne	.+4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0b de       	rcall	.-1002   	; 0xca <LCD_Data>
     4b4:	ff ef       	ldi	r31, 0xFF	; 255
     4b6:	ef 1a       	sub	r14, r31
     4b8:	ff 0a       	sbc	r15, r31
     4ba:	ec 14       	cp	r14, r12
     4bc:	fd 04       	cpc	r15, r13
     4be:	2c f3       	brlt	.-54     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     4c0:	0e cf       	rjmp	.-484    	; 0x2de <keyScan+0x36>
     4c2:	86 ea       	ldi	r24, 0xA6	; 166
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	26 96       	adiw	r28, 0x06	; 6
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	df 90       	pop	r13
     4de:	cf 90       	pop	r12
     4e0:	08 95       	ret

000004e2 <myDelay_us>:
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <myDelay_us+0x10>
     4e8:	45 e0       	ldi	r20, 0x05	; 5
     4ea:	4a 95       	dec	r20
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <myDelay_us+0x8>
     4ee:	2f 5f       	subi	r18, 0xFF	; 255
     4f0:	3f 4f       	sbci	r19, 0xFF	; 255
     4f2:	28 17       	cp	r18, r24
     4f4:	39 07       	cpc	r19, r25
     4f6:	c0 f3       	brcs	.-16     	; 0x4e8 <myDelay_us+0x6>
     4f8:	08 95       	ret

000004fa <SSound>:
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	6c 01       	movw	r12, r24
     50c:	9c 01       	movw	r18, r24
     50e:	99 0f       	add	r25, r25
     510:	44 0b       	sbc	r20, r20
     512:	55 0b       	sbc	r21, r21
     514:	60 e5       	ldi	r22, 0x50	; 80
     516:	73 ec       	ldi	r23, 0xC3	; 195
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	2b d6       	rcall	.+3158   	; 0x1174 <__divmodsi4>
     51e:	79 01       	movw	r14, r18
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	10 e0       	ldi	r17, 0x00	; 0
     524:	0e c0       	rjmp	.+28     	; 0x542 <SSound+0x48>
     526:	c5 e6       	ldi	r28, 0x65	; 101
     528:	d0 e0       	ldi	r29, 0x00	; 0
     52a:	88 81       	ld	r24, Y
     52c:	8f 7e       	andi	r24, 0xEF	; 239
     52e:	88 83       	st	Y, r24
     530:	c6 01       	movw	r24, r12
     532:	d7 df       	rcall	.-82     	; 0x4e2 <myDelay_us>
     534:	88 81       	ld	r24, Y
     536:	80 61       	ori	r24, 0x10	; 16
     538:	88 83       	st	Y, r24
     53a:	c6 01       	movw	r24, r12
     53c:	d2 df       	rcall	.-92     	; 0x4e2 <myDelay_us>
     53e:	0f 5f       	subi	r16, 0xFF	; 255
     540:	1f 4f       	sbci	r17, 0xFF	; 255
     542:	0e 15       	cp	r16, r14
     544:	1f 05       	cpc	r17, r15
     546:	7c f3       	brlt	.-34     	; 0x526 <SSound+0x2c>
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	08 95       	ret

0000055a <Init_BUZZER>:
     55a:	e4 e6       	ldi	r30, 0x64	; 100
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	80 81       	ld	r24, Z
     560:	80 61       	ori	r24, 0x10	; 16
     562:	80 83       	st	Z, r24
     564:	e5 e6       	ldi	r30, 0x65	; 101
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	80 61       	ori	r24, 0x10	; 16
     56c:	80 83       	st	Z, r24
     56e:	08 95       	ret

00000570 <putch_USART1>:
     570:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     574:	95 ff       	sbrs	r25, 5
     576:	fc cf       	rjmp	.-8      	; 0x570 <putch_USART1>
     578:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     57c:	08 95       	ret

0000057e <sendBuff_USART1>:
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	ec 01       	movw	r28, r24
     588:	03 c0       	rjmp	.+6      	; 0x590 <sendBuff_USART1+0x12>
     58a:	89 91       	ld	r24, Y+
     58c:	f1 df       	rcall	.-30     	; 0x570 <putch_USART1>
     58e:	b8 01       	movw	r22, r16
     590:	8b 01       	movw	r16, r22
     592:	01 50       	subi	r16, 0x01	; 1
     594:	11 09       	sbc	r17, r1
     596:	67 2b       	or	r22, r23
     598:	c1 f7       	brne	.-16     	; 0x58a <sendBuff_USART1+0xc>
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	08 95       	ret

000005a4 <Init_USART1_IntCon>:
     5a4:	88 e9       	ldi	r24, 0x98	; 152
     5a6:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     5aa:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     5ae:	8f e0       	ldi	r24, 0x0F	; 15
     5b0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     5b4:	78 94       	sei
     5b6:	08 95       	ret

000005b8 <__vector_30>:
     5b8:	1f 92       	push	r1
     5ba:	0f 92       	push	r0
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	0f 92       	push	r0
     5c0:	11 24       	eor	r1, r1
     5c2:	0b b6       	in	r0, 0x3b	; 59
     5c4:	0f 92       	push	r0
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	ef 93       	push	r30
     5cc:	ff 93       	push	r31
     5ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <RecBuffindex>
     5d2:	e8 2f       	mov	r30, r24
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     5da:	e9 54       	subi	r30, 0x49	; 73
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	90 83       	st	Z, r25
     5e0:	8f 5f       	subi	r24, 0xFF	; 255
     5e2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <RecBuffindex>
     5e6:	85 30       	cpi	r24, 0x05	; 5
     5e8:	28 f0       	brcs	.+10     	; 0x5f4 <__vector_30+0x3c>
     5ea:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <RecBuff+0x4>
     5ee:	9a 5f       	subi	r25, 0xFA	; 250
     5f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <RecBuff_estLength>
     5f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <RecBuff_estLength>
     5f8:	89 13       	cpse	r24, r25
     5fa:	03 c0       	rjmp	.+6      	; 0x602 <__vector_30+0x4a>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <RecFlg>
     602:	ff 91       	pop	r31
     604:	ef 91       	pop	r30
     606:	9f 91       	pop	r25
     608:	8f 91       	pop	r24
     60a:	0f 90       	pop	r0
     60c:	0b be       	out	0x3b, r0	; 59
     60e:	0f 90       	pop	r0
     610:	0f be       	out	0x3f, r0	; 63
     612:	0f 90       	pop	r0
     614:	1f 90       	pop	r1
     616:	18 95       	reti

00000618 <resPacket>:
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	c4 56       	subi	r28, 0x64	; 100
     622:	d1 09       	sbc	r29, r1
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	d9 01       	movw	r26, r18
     630:	9f ef       	ldi	r25, 0xFF	; 255
     632:	99 83       	std	Y+1, r25	; 0x01
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	9a 83       	std	Y+2, r25	; 0x02
     638:	8b 83       	std	Y+3, r24	; 0x03
     63a:	6c 83       	std	Y+4, r22	; 0x04
     63c:	4d 83       	std	Y+5, r20	; 0x05
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	65 e0       	ldi	r22, 0x05	; 5
     644:	0d c0       	rjmp	.+26     	; 0x660 <resPacket+0x48>
     646:	fd 01       	movw	r30, r26
     648:	e8 0f       	add	r30, r24
     64a:	f9 1f       	adc	r31, r25
     64c:	30 81       	ld	r19, Z
     64e:	e1 e0       	ldi	r30, 0x01	; 1
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	ec 0f       	add	r30, r28
     654:	fd 1f       	adc	r31, r29
     656:	e6 0f       	add	r30, r22
     658:	f1 1d       	adc	r31, r1
     65a:	30 83       	st	Z, r19
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	6f 5f       	subi	r22, 0xFF	; 255
     660:	e4 2f       	mov	r30, r20
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	8e 17       	cp	r24, r30
     666:	9f 07       	cpc	r25, r31
     668:	74 f3       	brlt	.-36     	; 0x646 <resPacket+0x2e>
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	86 df       	rcall	.-244    	; 0x57e <sendBuff_USART1>
     672:	cc 59       	subi	r28, 0x9C	; 156
     674:	df 4f       	sbci	r29, 0xFF	; 255
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <__vector_16>:
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
     690:	8f 93       	push	r24
     692:	9f 93       	push	r25
     694:	83 e8       	ldi	r24, 0x83	; 131
     696:	82 bf       	out	0x32, r24	; 50
     698:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <tmpTime>
     69c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <tmpTime+0x1>
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <tmpTime+0x1>
     6a6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <tmpTime>
     6aa:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <tmpTime>
     6ae:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <tmpTime+0x1>
     6b2:	89 2b       	or	r24, r25
     6b4:	d9 f0       	breq	.+54     	; 0x6ec <__vector_16+0x66>
     6b6:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <step>
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	87 70       	andi	r24, 0x07	; 7
     6c0:	90 78       	andi	r25, 0x80	; 128
     6c2:	99 23       	and	r25, r25
     6c4:	24 f4       	brge	.+8      	; 0x6ce <__vector_16+0x48>
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	88 6f       	ori	r24, 0xF8	; 248
     6ca:	9f 6f       	ori	r25, 0xFF	; 255
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <step>
     6d2:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <count>
     6d6:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <count+0x1>
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <count+0x1>
     6e0:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <count>
     6e4:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <tmpTime+0x1>
     6e8:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <tmpTime>
     6ec:	9f 91       	pop	r25
     6ee:	8f 91       	pop	r24
     6f0:	0f 90       	pop	r0
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	0f 90       	pop	r0
     6f6:	1f 90       	pop	r1
     6f8:	18 95       	reti

000006fa <MOTOR_forward_motion>:
     6fa:	87 b7       	in	r24, 0x37	; 55
     6fc:	81 60       	ori	r24, 0x01	; 1
     6fe:	87 bf       	out	0x37, r24	; 55
     700:	78 94       	sei
     702:	85 e0       	ldi	r24, 0x05	; 5
     704:	83 bf       	out	0x33, r24	; 51
     706:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <step>
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	e3 56       	subi	r30, 0x63	; 99
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
     710:	80 81       	ld	r24, Z
     712:	88 bb       	out	0x18, r24	; 24
     714:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <count>
     718:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <count+0x1>
     71c:	81 15       	cp	r24, r1
     71e:	94 40       	sbci	r25, 0x04	; 4
     720:	90 f3       	brcs	.-28     	; 0x706 <MOTOR_forward_motion+0xc>
     722:	18 ba       	out	0x18, r1	; 24
     724:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <count+0x1>
     728:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <count>
     72c:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <tmpTime+0x1>
     730:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <tmpTime>
     734:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <step>
     738:	87 b7       	in	r24, 0x37	; 55
     73a:	8e 7f       	andi	r24, 0xFE	; 254
     73c:	87 bf       	out	0x37, r24	; 55
     73e:	f8 94       	cli
     740:	83 b7       	in	r24, 0x33	; 51
     742:	8a 7f       	andi	r24, 0xFA	; 250
     744:	83 bf       	out	0x33, r24	; 51
     746:	78 94       	sei
     748:	08 95       	ret

0000074a <MOTOR_backward_motion>:
     74a:	87 b7       	in	r24, 0x37	; 55
     74c:	81 60       	ori	r24, 0x01	; 1
     74e:	87 bf       	out	0x37, r24	; 55
     750:	78 94       	sei
     752:	85 e0       	ldi	r24, 0x05	; 5
     754:	83 bf       	out	0x33, r24	; 51
     756:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <step>
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	eb 56       	subi	r30, 0x6B	; 107
     75e:	fe 4f       	sbci	r31, 0xFE	; 254
     760:	80 81       	ld	r24, Z
     762:	88 bb       	out	0x18, r24	; 24
     764:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <count>
     768:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <count+0x1>
     76c:	81 15       	cp	r24, r1
     76e:	94 40       	sbci	r25, 0x04	; 4
     770:	90 f3       	brcs	.-28     	; 0x756 <MOTOR_backward_motion+0xc>
     772:	18 ba       	out	0x18, r1	; 24
     774:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <count+0x1>
     778:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <count>
     77c:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <tmpTime+0x1>
     780:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <tmpTime>
     784:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <step>
     788:	87 b7       	in	r24, 0x37	; 55
     78a:	8e 7f       	andi	r24, 0xFE	; 254
     78c:	87 bf       	out	0x37, r24	; 55
     78e:	f8 94       	cli
     790:	83 b7       	in	r24, 0x33	; 51
     792:	8a 7f       	andi	r24, 0xFA	; 250
     794:	83 bf       	out	0x33, r24	; 51
     796:	78 94       	sei
     798:	08 95       	ret

0000079a <parsingPacket>:
     79a:	fc 01       	movw	r30, r24
     79c:	20 81       	ld	r18, Z
     79e:	2f 3f       	cpi	r18, 0xFF	; 255
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <parsingPacket+0xa>
     7a2:	e5 c0       	rjmp	.+458    	; 0x96e <parsingPacket+0x1d4>
     7a4:	21 81       	ldd	r18, Z+1	; 0x01
     7a6:	20 31       	cpi	r18, 0x10	; 16
     7a8:	09 f0       	breq	.+2      	; 0x7ac <parsingPacket+0x12>
     7aa:	e4 c0       	rjmp	.+456    	; 0x974 <parsingPacket+0x1da>
     7ac:	83 81       	ldd	r24, Z+3	; 0x03
     7ae:	82 30       	cpi	r24, 0x02	; 2
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <parsingPacket+0x1a>
     7b2:	34 c0       	rjmp	.+104    	; 0x81c <parsingPacket+0x82>
     7b4:	18 f4       	brcc	.+6      	; 0x7bc <parsingPacket+0x22>
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	41 f0       	breq	.+16     	; 0x7ca <parsingPacket+0x30>
     7ba:	df c0       	rjmp	.+446    	; 0x97a <parsingPacket+0x1e0>
     7bc:	83 30       	cpi	r24, 0x03	; 3
     7be:	09 f4       	brne	.+2      	; 0x7c2 <parsingPacket+0x28>
     7c0:	80 c0       	rjmp	.+256    	; 0x8c2 <parsingPacket+0x128>
     7c2:	84 30       	cpi	r24, 0x04	; 4
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <parsingPacket+0x2e>
     7c6:	aa c0       	rjmp	.+340    	; 0x91c <parsingPacket+0x182>
     7c8:	d8 c0       	rjmp	.+432    	; 0x97a <parsingPacket+0x1e0>
     7ca:	d7 dc       	rcall	.-1618   	; 0x17a <LCD_Clear>
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	cc dc       	rcall	.-1640   	; 0x16a <LCD_Pos>
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	7a dc       	rcall	.-1804   	; 0xca <LCD_Data>
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	78 dc       	rcall	.-1808   	; 0xca <LCD_Data>
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	c5 dc       	rcall	.-1654   	; 0x16a <LCD_Pos>
     7e0:	84 e0       	ldi	r24, 0x04	; 4
     7e2:	73 dc       	rcall	.-1818   	; 0xca <LCD_Data>
     7e4:	85 e0       	ldi	r24, 0x05	; 5
     7e6:	71 dc       	rcall	.-1822   	; 0xca <LCD_Data>
     7e8:	84 e7       	ldi	r24, 0x74	; 116
     7ea:	97 e0       	ldi	r25, 0x07	; 7
     7ec:	86 de       	rcall	.-756    	; 0x4fa <SSound>
     7ee:	84 ea       	ldi	r24, 0xA4	; 164
     7f0:	96 e0       	ldi	r25, 0x06	; 6
     7f2:	83 de       	rcall	.-762    	; 0x4fa <SSound>
     7f4:	8b ee       	ldi	r24, 0xEB	; 235
     7f6:	95 e0       	ldi	r25, 0x05	; 5
     7f8:	80 de       	rcall	.-768    	; 0x4fa <SSound>
     7fa:	a7 df       	rcall	.-178    	; 0x74a <MOTOR_backward_motion>
     7fc:	ff ef       	ldi	r31, 0xFF	; 255
     7fe:	2f ef       	ldi	r18, 0xFF	; 255
     800:	36 e7       	ldi	r19, 0x76	; 118
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	f1 50       	subi	r31, 0x01	; 1
     806:	20 40       	sbci	r18, 0x00	; 0
     808:	30 40       	sbci	r19, 0x00	; 0
     80a:	80 40       	sbci	r24, 0x00	; 0
     80c:	d9 f7       	brne	.-10     	; 0x804 <parsingPacket+0x6a>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <parsingPacket+0x76>
     810:	00 00       	nop
     812:	73 df       	rcall	.-282    	; 0x6fa <MOTOR_forward_motion>
     814:	b2 dc       	rcall	.-1692   	; 0x17a <LCD_Clear>
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	08 95       	ret
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	a4 dc       	rcall	.-1720   	; 0x16a <LCD_Pos>
     822:	8a e4       	ldi	r24, 0x4A	; 74
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	95 dc       	rcall	.-1750   	; 0x152 <LCD_Str>
     828:	88 b3       	in	r24, 0x18	; 24
     82a:	80 68       	ori	r24, 0x80	; 128
     82c:	88 bb       	out	0x18, r24	; 24
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	04 c0       	rjmp	.+8      	; 0x83c <parsingPacket+0xa2>
     834:	28 b3       	in	r18, 0x18	; 24
     836:	2f 77       	andi	r18, 0x7F	; 127
     838:	28 bb       	out	0x18, r18	; 24
     83a:	02 c0       	rjmp	.+4      	; 0x840 <parsingPacket+0xa6>
     83c:	0d 99       	sbic	0x01, 5	; 1
     83e:	fa cf       	rjmp	.-12     	; 0x834 <parsingPacket+0x9a>
     840:	c7 9b       	sbis	0x18, 7	; 24
     842:	12 c0       	rjmp	.+36     	; 0x868 <parsingPacket+0xce>
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	ef ef       	ldi	r30, 0xFF	; 255
     848:	f7 e4       	ldi	r31, 0x47	; 71
     84a:	31 97       	sbiw	r30, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <parsingPacket+0xb0>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <parsingPacket+0xb6>
     850:	00 00       	nop
     852:	80 3d       	cpi	r24, 0xD0	; 208
     854:	f7 e0       	ldi	r31, 0x07	; 7
     856:	9f 07       	cpc	r25, r31
     858:	89 f7       	brne	.-30     	; 0x83c <parsingPacket+0xa2>
     85a:	88 b3       	in	r24, 0x18	; 24
     85c:	8f 77       	andi	r24, 0x7F	; 127
     85e:	88 bb       	out	0x18, r24	; 24
     860:	8c dc       	rcall	.-1768   	; 0x17a <LCD_Clear>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	08 95       	ret
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	7e dc       	rcall	.-1796   	; 0x16a <LCD_Pos>
     86e:	8c e3       	ldi	r24, 0x3C	; 60
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	6f dc       	rcall	.-1826   	; 0x152 <LCD_Str>
     874:	19 dd       	rcall	.-1486   	; 0x2a8 <keyScan>
     876:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <keyscan_num+0x1>
     87a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <keyscan_num>
     87e:	9c 01       	movw	r18, r24
     880:	46 e0       	ldi	r20, 0x06	; 6
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	c8 de       	rcall	.-624    	; 0x618 <resPacket>
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <packet_type>
     88e:	75 dc       	rcall	.-1814   	; 0x17a <LCD_Clear>
     890:	84 e7       	ldi	r24, 0x74	; 116
     892:	97 e0       	ldi	r25, 0x07	; 7
     894:	32 de       	rcall	.-924    	; 0x4fa <SSound>
     896:	84 ea       	ldi	r24, 0xA4	; 164
     898:	96 e0       	ldi	r25, 0x06	; 6
     89a:	2f de       	rcall	.-930    	; 0x4fa <SSound>
     89c:	8b ee       	ldi	r24, 0xEB	; 235
     89e:	95 e0       	ldi	r25, 0x05	; 5
     8a0:	2c de       	rcall	.-936    	; 0x4fa <SSound>
     8a2:	53 df       	rcall	.-346    	; 0x74a <MOTOR_backward_motion>
     8a4:	2f ef       	ldi	r18, 0xFF	; 255
     8a6:	3f ef       	ldi	r19, 0xFF	; 255
     8a8:	86 e7       	ldi	r24, 0x76	; 118
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	21 50       	subi	r18, 0x01	; 1
     8ae:	30 40       	sbci	r19, 0x00	; 0
     8b0:	80 40       	sbci	r24, 0x00	; 0
     8b2:	90 40       	sbci	r25, 0x00	; 0
     8b4:	d9 f7       	brne	.-10     	; 0x8ac <parsingPacket+0x112>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <parsingPacket+0x11e>
     8b8:	00 00       	nop
     8ba:	1f df       	rcall	.-450    	; 0x6fa <MOTOR_forward_motion>
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	08 95       	ret
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	51 dc       	rcall	.-1886   	; 0x16a <LCD_Pos>
     8c8:	8c e3       	ldi	r24, 0x3C	; 60
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	42 dc       	rcall	.-1916   	; 0x152 <LCD_Str>
     8ce:	ec dc       	rcall	.-1576   	; 0x2a8 <keyScan>
     8d0:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <keyscan_num+0x1>
     8d4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <keyscan_num>
     8d8:	9c 01       	movw	r18, r24
     8da:	46 e0       	ldi	r20, 0x06	; 6
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	82 e0       	ldi	r24, 0x02	; 2
     8e0:	9b de       	rcall	.-714    	; 0x618 <resPacket>
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <packet_type>
     8e8:	48 dc       	rcall	.-1904   	; 0x17a <LCD_Clear>
     8ea:	84 e7       	ldi	r24, 0x74	; 116
     8ec:	97 e0       	ldi	r25, 0x07	; 7
     8ee:	05 de       	rcall	.-1014   	; 0x4fa <SSound>
     8f0:	84 ea       	ldi	r24, 0xA4	; 164
     8f2:	96 e0       	ldi	r25, 0x06	; 6
     8f4:	02 de       	rcall	.-1020   	; 0x4fa <SSound>
     8f6:	8b ee       	ldi	r24, 0xEB	; 235
     8f8:	95 e0       	ldi	r25, 0x05	; 5
     8fa:	ff dd       	rcall	.-1026   	; 0x4fa <SSound>
     8fc:	26 df       	rcall	.-436    	; 0x74a <MOTOR_backward_motion>
     8fe:	ef ef       	ldi	r30, 0xFF	; 255
     900:	ff ef       	ldi	r31, 0xFF	; 255
     902:	26 e7       	ldi	r18, 0x76	; 118
     904:	31 e0       	ldi	r19, 0x01	; 1
     906:	e1 50       	subi	r30, 0x01	; 1
     908:	f0 40       	sbci	r31, 0x00	; 0
     90a:	20 40       	sbci	r18, 0x00	; 0
     90c:	30 40       	sbci	r19, 0x00	; 0
     90e:	d9 f7       	brne	.-10     	; 0x906 <parsingPacket+0x16c>
     910:	00 c0       	rjmp	.+0      	; 0x912 <parsingPacket+0x178>
     912:	00 00       	nop
     914:	f2 de       	rcall	.-540    	; 0x6fa <MOTOR_forward_motion>
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	08 95       	ret
     91c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <packet_type>
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	61 f4       	brne	.+24     	; 0x93c <parsingPacket+0x1a2>
     924:	2d ea       	ldi	r18, 0xAD	; 173
     926:	31 e0       	ldi	r19, 0x01	; 1
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	75 de       	rcall	.-790    	; 0x618 <resPacket>
     92e:	25 dc       	rcall	.-1974   	; 0x17a <LCD_Clear>
     930:	87 e5       	ldi	r24, 0x57	; 87
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e dc       	rcall	.-2020   	; 0x152 <LCD_Str>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	08 95       	ret
     93c:	82 30       	cpi	r24, 0x02	; 2
     93e:	51 f4       	brne	.+20     	; 0x954 <parsingPacket+0x1ba>
     940:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <keyscan_num>
     944:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <keyscan_num+0x1>
     948:	46 e0       	ldi	r20, 0x06	; 6
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	65 de       	rcall	.-822    	; 0x618 <resPacket>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	08 95       	ret
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	a1 f4       	brne	.+40     	; 0x980 <parsingPacket+0x1e6>
     958:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <keyscan_num>
     95c:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <keyscan_num+0x1>
     960:	46 e0       	ldi	r20, 0x06	; 6
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	58 de       	rcall	.-848    	; 0x618 <resPacket>
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	08 95       	ret
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	08 95       	ret
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	08 95       	ret
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	08 95       	ret
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	08 95       	ret

00000986 <Init_MOTOR>:
     986:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <count+0x1>
     98a:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <count>
     98e:	87 b3       	in	r24, 0x17	; 23
     990:	8f 60       	ori	r24, 0x0F	; 15
     992:	87 bb       	out	0x17, r24	; 23
     994:	88 b3       	in	r24, 0x18	; 24
     996:	80 7f       	andi	r24, 0xF0	; 240
     998:	88 bb       	out	0x18, r24	; 24
     99a:	83 e8       	ldi	r24, 0x83	; 131
     99c:	82 bf       	out	0x32, r24	; 50
     99e:	08 95       	ret

000009a0 <Check_Distance>:
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	8e bd       	out	0x2e, r24	; 46
     9a4:	83 b1       	in	r24, 0x03	; 3
     9a6:	8f 7b       	andi	r24, 0xBF	; 191
     9a8:	83 b9       	out	0x03, r24	; 3
     9aa:	21 e3       	ldi	r18, 0x31	; 49
     9ac:	2a 95       	dec	r18
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <Check_Distance+0xc>
     9b0:	00 00       	nop
     9b2:	83 b1       	in	r24, 0x03	; 3
     9b4:	80 64       	ori	r24, 0x40	; 64
     9b6:	83 b9       	out	0x03, r24	; 3
     9b8:	81 e3       	ldi	r24, 0x31	; 49
     9ba:	8a 95       	dec	r24
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <Check_Distance+0x1a>
     9be:	00 00       	nop
     9c0:	83 b1       	in	r24, 0x03	; 3
     9c2:	8f 7b       	andi	r24, 0xBF	; 191
     9c4:	83 b9       	out	0x03, r24	; 3
     9c6:	0f 9b       	sbis	0x01, 7	; 1
     9c8:	fe cf       	rjmp	.-4      	; 0x9c6 <Check_Distance+0x26>
     9ca:	1d bc       	out	0x2d, r1	; 45
     9cc:	1c bc       	out	0x2c, r1	; 44
     9ce:	0f 99       	sbic	0x01, 7	; 1
     9d0:	fe cf       	rjmp	.-4      	; 0x9ce <Check_Distance+0x2e>
     9d2:	1e bc       	out	0x2e, r1	; 46
     9d4:	6c b5       	in	r22, 0x2c	; 44
     9d6:	7d b5       	in	r23, 0x2d	; 45
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	da d2       	rcall	.+1460   	; 0xf92 <__floatunsisf>
     9de:	28 e4       	ldi	r18, 0x48	; 72
     9e0:	31 ee       	ldi	r19, 0xE1	; 225
     9e2:	4a e8       	ldi	r20, 0x8A	; 138
     9e4:	50 e4       	ldi	r21, 0x40	; 64
     9e6:	63 d3       	rcall	.+1734   	; 0x10ae <__mulsf3>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	5f e3       	ldi	r21, 0x3F	; 63
     9f0:	5e d3       	rcall	.+1724   	; 0x10ae <__mulsf3>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	4a ea       	ldi	r20, 0xAA	; 170
     9f8:	53 e4       	ldi	r21, 0x43	; 67
     9fa:	59 d3       	rcall	.+1714   	; 0x10ae <__mulsf3>
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	4a e7       	ldi	r20, 0x7A	; 122
     a02:	54 e4       	ldi	r21, 0x44	; 68
     a04:	32 d2       	rcall	.+1124   	; 0xe6a <__divsf3>
     a06:	99 d2       	rcall	.+1330   	; 0xf3a <__fixunssfsi>
     a08:	64 3f       	cpi	r22, 0xF4	; 244
     a0a:	71 40       	sbci	r23, 0x01	; 1
     a0c:	10 f4       	brcc	.+4      	; 0xa12 <Check_Distance+0x72>
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	08 95       	ret
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	08 95       	ret

00000a16 <Init_Distance>:
     a16:	82 b1       	in	r24, 0x02	; 2
     a18:	80 64       	ori	r24, 0x40	; 64
     a1a:	82 b9       	out	0x02, r24	; 2
     a1c:	83 b1       	in	r24, 0x03	; 3
     a1e:	8f 7b       	andi	r24, 0xBF	; 191
     a20:	83 b9       	out	0x03, r24	; 3
     a22:	08 95       	ret

00000a24 <Check_Light>:
     a24:	86 b1       	in	r24, 0x06	; 6
     a26:	80 64       	ori	r24, 0x40	; 64
     a28:	86 b9       	out	0x06, r24	; 6
     a2a:	34 9b       	sbis	0x06, 4	; 6
     a2c:	fe cf       	rjmp	.-4      	; 0xa2a <Check_Light+0x6>
     a2e:	24 b1       	in	r18, 0x04	; 4
     a30:	85 b1       	in	r24, 0x05	; 5
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	98 2f       	mov	r25, r24
     a36:	88 27       	eor	r24, r24
     a38:	82 2b       	or	r24, r18
     a3a:	87 36       	cpi	r24, 0x67	; 103
     a3c:	93 40       	sbci	r25, 0x03	; 3
     a3e:	18 f0       	brcs	.+6      	; 0xa46 <Check_Light+0x22>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	08 95       	ret
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	08 95       	ret

00000a4c <Init_LIGHT>:
     a4c:	e1 e6       	ldi	r30, 0x61	; 97
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	8e 7f       	andi	r24, 0xFE	; 254
     a54:	80 83       	st	Z, r24
     a56:	80 e4       	ldi	r24, 0x40	; 64
     a58:	87 b9       	out	0x07, r24	; 7
     a5a:	87 e8       	ldi	r24, 0x87	; 135
     a5c:	86 b9       	out	0x06, r24	; 6
     a5e:	08 95       	ret

00000a60 <Timer_TurnOn>:
}
void Timer_TurnOn(){
	TCCR2 = 0x00;       // Timer 초기화
     a60:	15 bc       	out	0x25, r1	; 37
	TCNT2 = 0;          // Timer Counter 초기화
     a62:	14 bc       	out	0x24, r1	; 36
	TCCR2 = (1<<CS22) | (0<<CS21)| (1<<CS20);  // 1/1024
     a64:	85 e0       	ldi	r24, 0x05	; 5
     a66:	85 bd       	out	0x25, r24	; 37
	// 1Cnt =  69.444.. us , OVF interval : 17.77.. ms
	TIMSK = (1<<TOIE2); // OVF 감지 설정
     a68:	80 e4       	ldi	r24, 0x40	; 64
     a6a:	87 bf       	out	0x37, r24	; 55
     a6c:	08 95       	ret

00000a6e <Timer_TurnOff>:
}
void Timer_TurnOff(){
	TCCR2 = 0x00;   // preScaler 초기화로 타이머 정지
     a6e:	15 bc       	out	0x25, r1	; 37
     a70:	08 95       	ret

00000a72 <__vector_10>:
}
ISR(TIMER2_OVF_vect){
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
     a7c:	0b b6       	in	r0, 0x3b	; 59
     a7e:	0f 92       	push	r0
     a80:	2f 93       	push	r18
     a82:	3f 93       	push	r19
     a84:	4f 93       	push	r20
     a86:	5f 93       	push	r21
     a88:	6f 93       	push	r22
     a8a:	7f 93       	push	r23
     a8c:	8f 93       	push	r24
     a8e:	9f 93       	push	r25
     a90:	af 93       	push	r26
     a92:	bf 93       	push	r27
     a94:	ef 93       	push	r30
     a96:	ff 93       	push	r31
	Timer_TurnOff();
     a98:	ea df       	rcall	.-44     	; 0xa6e <Timer_TurnOff>
	Flg_TimeOver = 1;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <Flg_TimeOver>
}
     aa0:	ff 91       	pop	r31
     aa2:	ef 91       	pop	r30
     aa4:	bf 91       	pop	r27
     aa6:	af 91       	pop	r26
     aa8:	9f 91       	pop	r25
     aaa:	8f 91       	pop	r24
     aac:	7f 91       	pop	r23
     aae:	6f 91       	pop	r22
     ab0:	5f 91       	pop	r21
     ab2:	4f 91       	pop	r20
     ab4:	3f 91       	pop	r19
     ab6:	2f 91       	pop	r18
     ab8:	0f 90       	pop	r0
     aba:	0b be       	out	0x3b, r0	; 59
     abc:	0f 90       	pop	r0
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	0f 90       	pop	r0
     ac2:	1f 90       	pop	r1
     ac4:	18 95       	reti

00000ac6 <__vector_5>:
ISR(INT4_vect){
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	0b b6       	in	r0, 0x3b	; 59
     ad2:	0f 92       	push	r0
     ad4:	2f 93       	push	r18
     ad6:	3f 93       	push	r19
     ad8:	4f 93       	push	r20
     ada:	5f 93       	push	r21
     adc:	6f 93       	push	r22
     ade:	7f 93       	push	r23
     ae0:	8f 93       	push	r24
     ae2:	9f 93       	push	r25
     ae4:	af 93       	push	r26
     ae6:	bf 93       	push	r27
     ae8:	ef 93       	push	r30
     aea:	ff 93       	push	r31
	Pulse_Width[Pulse_WidthIndex] = TCNT2;
     aec:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <Pulse_WidthIndex>
     af0:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <Pulse_WidthIndex+0x1>
     af4:	24 b5       	in	r18, 0x24	; 36
     af6:	fc 01       	movw	r30, r24
     af8:	ee 0f       	add	r30, r30
     afa:	ff 1f       	adc	r31, r31
     afc:	e0 5e       	subi	r30, 0xE0	; 224
     afe:	fd 4f       	sbci	r31, 0xFD	; 253
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	31 83       	std	Z+1, r19	; 0x01
     b04:	20 83       	st	Z, r18
	Pulse_WidthIndex++;
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <Pulse_WidthIndex+0x1>
     b0c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <Pulse_WidthIndex>
	Timer_TurnOn();
     b10:	a7 df       	rcall	.-178    	; 0xa60 <Timer_TurnOn>
}
     b12:	ff 91       	pop	r31
     b14:	ef 91       	pop	r30
     b16:	bf 91       	pop	r27
     b18:	af 91       	pop	r26
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	7f 91       	pop	r23
     b20:	6f 91       	pop	r22
     b22:	5f 91       	pop	r21
     b24:	4f 91       	pop	r20
     b26:	3f 91       	pop	r19
     b28:	2f 91       	pop	r18
     b2a:	0f 90       	pop	r0
     b2c:	0b be       	out	0x3b, r0	; 59
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <EXTI_Init>:
void EXTI_Init()    // PE4 - REMOTE IN
{
	EIMSK = 0x10;
     b38:	80 e1       	ldi	r24, 0x10	; 16
     b3a:	89 bf       	out	0x39, r24	; 57
	EICRB = (1<<ISC41) | (1<<ISC40);    // Riding Edge
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	8a bf       	out	0x3a, r24	; 58
	sei();
     b40:	78 94       	sei
     b42:	08 95       	ret

00000b44 <GetCode_Raw>:
}

uint32_t GetCode_Raw(
uint16_t *pTimeArray
, uint16_t arraySize
){
     b44:	cf 92       	push	r12
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
	int i=0;
	uint32_t rawCode = 0;
	uint8_t address = 0;
	uint8_t commnad = 0;
	
	if(arraySize < 32)
     b4c:	60 32       	cpi	r22, 0x20	; 32
     b4e:	71 05       	cpc	r23, r1
     b50:	58 f1       	brcs	.+86     	; 0xba8 <GetCode_Raw+0x64>
     b52:	c1 2c       	mov	r12, r1
     b54:	d1 2c       	mov	r13, r1
     b56:	76 01       	movw	r14, r12
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	1d c0       	rjmp	.+58     	; 0xb98 <GetCode_Raw+0x54>
	return -1;
	
	for(i=0; i<arraySize ; i++){
		if(pTimeArray[i] < 15){  // 1ms 이하의 pulse는 무시
     b5e:	f9 01       	movw	r30, r18
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	e8 0f       	add	r30, r24
     b66:	f9 1f       	adc	r31, r25
     b68:	40 81       	ld	r20, Z
     b6a:	51 81       	ldd	r21, Z+1	; 0x01
     b6c:	4f 30       	cpi	r20, 0x0F	; 15
     b6e:	51 05       	cpc	r21, r1
     b70:	88 f0       	brcs	.+34     	; 0xb94 <GetCode_Raw+0x50>
			continue;
			}else if(pTimeArray[i] < 20){  // 1.388 ms 이하의 Pulse는 0으로 설정
     b72:	44 31       	cpi	r20, 0x14	; 20
     b74:	51 05       	cpc	r21, r1
     b76:	28 f4       	brcc	.+10     	; 0xb82 <GetCode_Raw+0x3e>
			rawCode = rawCode<<1;
     b78:	cc 0c       	add	r12, r12
     b7a:	dd 1c       	adc	r13, r13
     b7c:	ee 1c       	adc	r14, r14
     b7e:	ff 1c       	adc	r15, r15
     b80:	09 c0       	rjmp	.+18     	; 0xb94 <GetCode_Raw+0x50>
			}else if(pTimeArray[i] < 35){  // 2.43 ms 이하의 Pulse는 1으로 설정
     b82:	43 32       	cpi	r20, 0x23	; 35
     b84:	51 05       	cpc	r21, r1
     b86:	30 f4       	brcc	.+12     	; 0xb94 <GetCode_Raw+0x50>
			rawCode = rawCode<<1;
     b88:	cc 0c       	add	r12, r12
     b8a:	dd 1c       	adc	r13, r13
     b8c:	ee 1c       	adc	r14, r14
     b8e:	ff 1c       	adc	r15, r15
			rawCode |= 0x01;
     b90:	68 94       	set
     b92:	c0 f8       	bld	r12, 0
	uint8_t commnad = 0;
	
	if(arraySize < 32)
	return -1;
	
	for(i=0; i<arraySize ; i++){
     b94:	2f 5f       	subi	r18, 0xFF	; 255
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	26 17       	cp	r18, r22
     b9a:	37 07       	cpc	r19, r23
     b9c:	00 f3       	brcs	.-64     	; 0xb5e <GetCode_Raw+0x1a>
			}else if(pTimeArray[i] < 35){  // 2.43 ms 이하의 Pulse는 1으로 설정
			rawCode = rawCode<<1;
			rawCode |= 0x01;
		}
	}
	return rawCode;
     b9e:	6c 2d       	mov	r22, r12
     ba0:	7d 2d       	mov	r23, r13
     ba2:	8e 2d       	mov	r24, r14
     ba4:	9f 2d       	mov	r25, r15
     ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <GetCode_Raw+0x6c>
	uint32_t rawCode = 0;
	uint8_t address = 0;
	uint8_t commnad = 0;
	
	if(arraySize < 32)
	return -1;
     ba8:	6f ef       	ldi	r22, 0xFF	; 255
     baa:	7f ef       	ldi	r23, 0xFF	; 255
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	9f ef       	ldi	r25, 0xFF	; 255
			rawCode = rawCode<<1;
			rawCode |= 0x01;
		}
	}
	return rawCode;
}
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	08 95       	ret

00000bba <GetCode>:
uint32_t GetCode(
uint16_t *pTimeArray
, uint16_t arraySize
, uint8_t *pRetAddress
, uint8_t *pRetCommand
){
     bba:	4f 92       	push	r4
     bbc:	5f 92       	push	r5
     bbe:	6f 92       	push	r6
     bc0:	7f 92       	push	r7
     bc2:	8f 92       	push	r8
     bc4:	9f 92       	push	r9
     bc6:	af 92       	push	r10
     bc8:	bf 92       	push	r11
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	8a 01       	movw	r16, r20
     bdc:	e9 01       	movw	r28, r18
	int i=0;
	uint32_t rawCode = 0;
	uint32_t rawCode_inv = 0;
	uint8_t commnad = 0;
	
	rawCode = GetCode_Raw(pTimeArray,arraySize);
     bde:	b2 df       	rcall	.-156    	; 0xb44 <GetCode_Raw>
	if(rawCode == -1)
     be0:	6f 3f       	cpi	r22, 0xFF	; 255
     be2:	2f ef       	ldi	r18, 0xFF	; 255
     be4:	72 07       	cpc	r23, r18
     be6:	82 07       	cpc	r24, r18
     be8:	92 07       	cpc	r25, r18
     bea:	21 f1       	breq	.+72     	; 0xc34 <GetCode+0x7a>
	return 0;
	
	rawCode_inv = ~rawCode;
     bec:	6b 01       	movw	r12, r22
     bee:	7c 01       	movw	r14, r24
     bf0:	c0 94       	com	r12
     bf2:	d0 94       	com	r13
     bf4:	e0 94       	com	r14
     bf6:	f0 94       	com	r15
	
	if( ((rawCode>>24)&0xFF) != ((rawCode_inv>>16)&0xFF) )
     bf8:	89 2e       	mov	r8, r25
     bfa:	99 24       	eor	r9, r9
     bfc:	aa 24       	eor	r10, r10
     bfe:	bb 24       	eor	r11, r11
     c00:	4e 2c       	mov	r4, r14
     c02:	51 2c       	mov	r5, r1
     c04:	61 2c       	mov	r6, r1
     c06:	71 2c       	mov	r7, r1
     c08:	84 14       	cp	r8, r4
     c0a:	95 04       	cpc	r9, r5
     c0c:	a6 04       	cpc	r10, r6
     c0e:	b7 04       	cpc	r11, r7
     c10:	b1 f4       	brne	.+44     	; 0xc3e <GetCode+0x84>
	return 0;
	
	if( ((rawCode>>8)&0xFF) != ((rawCode_inv>>0)&0xFF) )
     c12:	47 2e       	mov	r4, r23
     c14:	58 2e       	mov	r5, r24
     c16:	69 2e       	mov	r6, r25
     c18:	77 24       	eor	r7, r7
     c1a:	c4 24       	eor	r12, r4
     c1c:	d5 24       	eor	r13, r5
     c1e:	e6 24       	eor	r14, r6
     c20:	f7 24       	eor	r15, r7
     c22:	c1 10       	cpse	r12, r1
     c24:	11 c0       	rjmp	.+34     	; 0xc48 <GetCode+0x8e>
	return 0;
	
	*pRetAddress  = (rawCode>>24)&0xFF;
     c26:	f8 01       	movw	r30, r16
     c28:	80 82       	st	Z, r8
	*pRetCommand  = (rawCode>>8)&0xFF;
     c2a:	48 82       	st	Y, r4
	return rawCode;
     c2c:	46 2f       	mov	r20, r22
     c2e:	37 2f       	mov	r19, r23
     c30:	28 2f       	mov	r18, r24
     c32:	0e c0       	rjmp	.+28     	; 0xc50 <GetCode+0x96>
	uint32_t rawCode_inv = 0;
	uint8_t commnad = 0;
	
	rawCode = GetCode_Raw(pTimeArray,arraySize);
	if(rawCode == -1)
	return 0;
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	09 c0       	rjmp	.+18     	; 0xc50 <GetCode+0x96>
	
	rawCode_inv = ~rawCode;
	
	if( ((rawCode>>24)&0xFF) != ((rawCode_inv>>16)&0xFF) )
	return 0;
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	04 c0       	rjmp	.+8      	; 0xc50 <GetCode+0x96>
	
	if( ((rawCode>>8)&0xFF) != ((rawCode_inv>>0)&0xFF) )
	return 0;
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
	
	*pRetAddress  = (rawCode>>24)&0xFF;
	*pRetCommand  = (rawCode>>8)&0xFF;
	return rawCode;
}
     c50:	64 2f       	mov	r22, r20
     c52:	73 2f       	mov	r23, r19
     c54:	82 2f       	mov	r24, r18
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	df 90       	pop	r13
     c64:	cf 90       	pop	r12
     c66:	bf 90       	pop	r11
     c68:	af 90       	pop	r10
     c6a:	9f 90       	pop	r9
     c6c:	8f 90       	pop	r8
     c6e:	7f 90       	pop	r7
     c70:	6f 90       	pop	r6
     c72:	5f 90       	pop	r5
     c74:	4f 90       	pop	r4
     c76:	08 95       	ret

00000c78 <Check_remote>:

void Check_remote()
{
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <Check_remote+0x6>
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
	int i=0;
	uint32_t remotecontroller_rawData;
	uint8_t remotecontroller_address;
	uint8_t remotecontroller_command;
	
	if(Flg_TimeOver)
     c82:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <Flg_TimeOver>
     c86:	88 23       	and	r24, r24
     c88:	09 f4       	brne	.+2      	; 0xc8c <Check_remote+0x14>
     c8a:	4e c0       	rjmp	.+156    	; 0xd28 <Check_remote+0xb0>
	{
		remotecontroller_rawData = GetCode(
     c8c:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <Pulse_WidthIndex>
     c90:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <Pulse_WidthIndex+0x1>
     c94:	9e 01       	movw	r18, r28
     c96:	2e 5f       	subi	r18, 0xFE	; 254
     c98:	3f 4f       	sbci	r19, 0xFF	; 255
     c9a:	ae 01       	movw	r20, r28
     c9c:	4f 5f       	subi	r20, 0xFF	; 255
     c9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ca0:	80 e2       	ldi	r24, 0x20	; 32
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	8a df       	rcall	.-236    	; 0xbba <GetCode>
		, Pulse_WidthIndex
		, &remotecontroller_address
		, &remotecontroller_command
		);
		
		if(remotecontroller_rawData != 0){
     ca6:	67 2b       	or	r22, r23
     ca8:	68 2b       	or	r22, r24
     caa:	69 2b       	or	r22, r25
     cac:	81 f1       	breq	.+96     	; 0xd0e <Check_remote+0x96>
			if(remotecontroller_command == INSPECTION_command){
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <INSPECTION_command>
     cb4:	98 13       	cpse	r25, r24
     cb6:	2b c0       	rjmp	.+86     	; 0xd0e <Check_remote+0x96>
				LCD_Pos(0, 0);
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	56 da       	rcall	.-2900   	; 0x16a <LCD_Pos>
				if(OPEN == 0){
     cbe:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <OPEN>
     cc2:	81 11       	cpse	r24, r1
     cc4:	11 c0       	rjmp	.+34     	; 0xce8 <Check_remote+0x70>
					LCD_Str("INSPECTION...");
     cc6:	8f e5       	ldi	r24, 0x5F	; 95
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	43 da       	rcall	.-2938   	; 0x152 <LCD_Str>
					SSound(Sol);
     ccc:	8b ef       	ldi	r24, 0xFB	; 251
     cce:	94 e0       	ldi	r25, 0x04	; 4
     cd0:	14 dc       	rcall	.-2008   	; 0x4fa <SSound>
					SSound(La);
     cd2:	80 e7       	ldi	r24, 0x70	; 112
     cd4:	94 e0       	ldi	r25, 0x04	; 4
					SSound(Si);
     cd6:	11 dc       	rcall	.-2014   	; 0x4fa <SSound>
     cd8:	84 ef       	ldi	r24, 0xF4	; 244
     cda:	93 e0       	ldi	r25, 0x03	; 3
     cdc:	0e dc       	rcall	.-2020   	; 0x4fa <SSound>
					MOTOR_backward_motion();
     cde:	35 dd       	rcall	.-1430   	; 0x74a <MOTOR_backward_motion>
					OPEN = 1;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <OPEN>
				}
				else if(OPEN == 1){
     ce6:	13 c0       	rjmp	.+38     	; 0xd0e <Check_remote+0x96>
					LCD_Clear();
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	89 f4       	brne	.+34     	; 0xd0e <Check_remote+0x96>
					LCD_Str("Complete");
     cec:	46 da       	rcall	.-2932   	; 0x17a <LCD_Clear>
     cee:	8d e6       	ldi	r24, 0x6D	; 109
     cf0:	91 e0       	ldi	r25, 0x01	; 1
					SSound(Si);
     cf2:	2f da       	rcall	.-2978   	; 0x152 <LCD_Str>
     cf4:	84 ef       	ldi	r24, 0xF4	; 244
     cf6:	93 e0       	ldi	r25, 0x03	; 3
					SSound(La);
     cf8:	00 dc       	rcall	.-2048   	; 0x4fa <SSound>
     cfa:	80 e7       	ldi	r24, 0x70	; 112
     cfc:	94 e0       	ldi	r25, 0x04	; 4
     cfe:	fd db       	rcall	.-2054   	; 0x4fa <SSound>
					SSound(Sol);
     d00:	8b ef       	ldi	r24, 0xFB	; 251
     d02:	94 e0       	ldi	r25, 0x04	; 4
     d04:	fa db       	rcall	.-2060   	; 0x4fa <SSound>
     d06:	f9 dc       	rcall	.-1550   	; 0x6fa <MOTOR_forward_motion>
					MOTOR_forward_motion();
     d08:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <OPEN>
					OPEN = 0;
     d0c:	36 da       	rcall	.-2964   	; 0x17a <LCD_Clear>
     d0e:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <Pulse_WidthIndex+0x1>
					LCD_Clear();
     d12:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <Pulse_WidthIndex>
				}
			}
		}
		
		// 리모콘 Pulse 정보 초기화
		Pulse_WidthIndex = 0;
     d16:	88 ec       	ldi	r24, 0xC8	; 200
     d18:	e0 e2       	ldi	r30, 0x20	; 32
     d1a:	f2 e0       	ldi	r31, 0x02	; 2
		memset(Pulse_Width,0,sizeof(Pulse_Width));
     d1c:	df 01       	movw	r26, r30
     d1e:	1d 92       	st	X+, r1
     d20:	8a 95       	dec	r24
     d22:	e9 f7       	brne	.-6      	; 0xd1e <Check_remote+0xa6>
     d24:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <Flg_TimeOver>
     d28:	0f 90       	pop	r0
		
		Flg_TimeOver = 0;
     d2a:	0f 90       	pop	r0
     d2c:	df 91       	pop	r29
	}
}
     d2e:	cf 91       	pop	r28
     d30:	08 95       	ret

00000d32 <HIGH_LED>:
     d32:	89 2b       	or	r24, r25
     d34:	21 f0       	breq	.+8      	; 0xd3e <HIGH_LED+0xc>
     d36:	82 b3       	in	r24, 0x12	; 18

void HIGH_LED(int onoff){
	// 전달받는 onoff에 따라 high luminance LED 켜고 끄기
	if(onoff){ 
		// onoff == 1, LED ON
		PORTD |= 0xf0;
     d38:	80 6f       	ori	r24, 0xF0	; 240
     d3a:	82 bb       	out	0x12, r24	; 18
     d3c:	08 95       	ret
	}
	else{ 
		// onoff == 0, LED OFF
		PORTD &= ~(0xf0);
     d3e:	82 b3       	in	r24, 0x12	; 18
     d40:	8f 70       	andi	r24, 0x0F	; 15
     d42:	82 bb       	out	0x12, r24	; 18
     d44:	08 95       	ret

00000d46 <Init_Port>:
	}
}

void Init_Port(){
	// PORTC for Keypad
	DDRC = 0xf0;
     d46:	80 ef       	ldi	r24, 0xF0	; 240
     d48:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
     d4a:	15 ba       	out	0x15, r1	; 21
	// PORTD for high luminance LED
	DDRD |= 0xf0;
     d4c:	81 b3       	in	r24, 0x11	; 17
     d4e:	80 6f       	ori	r24, 0xF0	; 240
     d50:	81 bb       	out	0x11, r24	; 17
	PORTD &= 0x0f;
     d52:	82 b3       	in	r24, 0x12	; 18
     d54:	8f 70       	andi	r24, 0x0F	; 15
     d56:	82 bb       	out	0x12, r24	; 18
	// PORTE for switch
	DDRE &= ~(0x20);
     d58:	82 b1       	in	r24, 0x02	; 2
     d5a:	8f 7d       	andi	r24, 0xDF	; 223
     d5c:	82 b9       	out	0x02, r24	; 2
	//PORTB for LED
	DDRB |= 0x80;
     d5e:	87 b3       	in	r24, 0x17	; 23
     d60:	80 68       	ori	r24, 0x80	; 128
     d62:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(0x80);
     d64:	88 b3       	in	r24, 0x18	; 24
     d66:	8f 77       	andi	r24, 0x7F	; 127
     d68:	88 bb       	out	0x18, r24	; 24
     d6a:	08 95       	ret

00000d6c <main>:
}

int main(void)
{
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	c4 56       	subi	r28, 0x64	; 100
     d76:	d1 09       	sbc	r29, r1
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
	Init_USART1_IntCon();
     d82:	10 dc       	rcall	.-2016   	; 0x5a4 <Init_USART1_IntCon>
	Init_MOTOR();
     d84:	00 de       	rcall	.-1024   	; 0x986 <Init_MOTOR>
	Init_Distance();
     d86:	47 de       	rcall	.-882    	; 0xa16 <Init_Distance>
	Init_LIGHT();
     d88:	61 de       	rcall	.-830    	; 0xa4c <Init_LIGHT>
	LCD_Init();
     d8a:	04 da       	rcall	.-3064   	; 0x194 <LCD_Init>
	CGRAM_Set();
     d8c:	1a da       	rcall	.-3020   	; 0x1c2 <CGRAM_Set>
     d8e:	db df       	rcall	.-74     	; 0xd46 <Init_Port>
	Init_Port();
     d90:	e4 db       	rcall	.-2104   	; 0x55a <Init_BUZZER>
     d92:	d2 de       	rcall	.-604    	; 0xb38 <EXTI_Init>
	Init_BUZZER();
     d94:	c1 2c       	mov	r12, r1
	EXTI_Init();
     d96:	d1 2c       	mov	r13, r1
     d98:	11 e0       	ldi	r17, 0x01	; 1
	
	// 대기 상태
	unsigned char READY = 1;
	// HIGH LED ON/OFF 제어
	int MAIN_on_off = 0;
     d9a:	11 23       	and	r17, r17
     d9c:	f9 f0       	breq	.+62     	; 0xddc <main+0x70>
	Init_Port();
	Init_BUZZER();
	EXTI_Init();
	
	// 대기 상태
	unsigned char READY = 1;
     d9e:	00 de       	rcall	.-1024   	; 0x9a0 <Check_Distance>
	// HIGH LED ON/OFF 제어
	int MAIN_on_off = 0;
    
    while (1) 
    {
		if(READY && Check_Distance() && OPEN == 0){
     da0:	88 23       	and	r24, r24
     da2:	e1 f0       	breq	.+56     	; 0xddc <main+0x70>
     da4:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <OPEN>
     da8:	81 11       	cpse	r24, r1
     daa:	18 c0       	rjmp	.+48     	; 0xddc <main+0x70>
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	dd d9       	rcall	.-3142   	; 0x16a <LCD_Pos>
			LCD_Pos(0, 0);
     db0:	86 e7       	ldi	r24, 0x76	; 118
     db2:	91 e0       	ldi	r25, 0x01	; 1
			LCD_Str("Welcome");
     db4:	ce d9       	rcall	.-3172   	; 0x152 <LCD_Str>
     db6:	36 de       	rcall	.-916    	; 0xa24 <Check_Light>
     db8:	89 2b       	or	r24, r25
     dba:	31 f0       	breq	.+12     	; 0xdc8 <main+0x5c>
			READY = 0;
			
			// 주변 환경 어두우면 고휘도 LED ON
			if(Check_Light()){
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	b8 df       	rcall	.-144    	; 0xd32 <HIGH_LED>
				MAIN_on_off = 1;
				HIGH_LED(MAIN_on_off);
     dc2:	cc 24       	eor	r12, r12
     dc4:	c3 94       	inc	r12
     dc6:	d1 2c       	mov	r13, r1
			LCD_Str("Welcome");
			READY = 0;
			
			// 주변 환경 어두우면 고휘도 LED ON
			if(Check_Light()){
				MAIN_on_off = 1;
     dc8:	2d ea       	ldi	r18, 0xAD	; 173
     dca:	31 e0       	ldi	r19, 0x01	; 1
     dcc:	46 e0       	ldi	r20, 0x06	; 6
				HIGH_LED(MAIN_on_off);
			}
			
			// 차량 번호판 인식 요청
			resPacket(0x01, 0x01, 0x06, &blank_Data);
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	22 dc       	rcall	.-1980   	; 0x618 <resPacket>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <packet_type>
     dda:	10 e0       	ldi	r17, 0x00	; 0
			packet_type = 0x01;
     ddc:	4d df       	rcall	.-358    	; 0xc78 <Check_remote>
     dde:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <RecFlg>
		}
		
		Check_remote(); // 차단기 점검
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	d1 f6       	brne	.-76     	; 0xd9a <main+0x2e>
		
		unsigned char lRecBuff[100];        // 수신패킷 임시저장용 배열
		unsigned char lRecBuffLength = 0;   // 수신패킷 길이 저장
		int res = 0;
		
		if(RecFlg == 1) // 패킷 수신완료 플래그가 설정된 경우
     de6:	e0 90 01 01 	lds	r14, 0x0101	; 0x800101 <RecBuff_estLength>
     dea:	f1 2c       	mov	r15, r1
     dec:	a7 01       	movw	r20, r14
		{
			// 데이터의 연속 수신을 고려하여, 임시변수에 수신된 데이터 저장
			memcpy(lRecBuff, RecBuff, RecBuff_estLength);
     dee:	67 eb       	ldi	r22, 0xB7	; 183
     df0:	71 e0       	ldi	r23, 0x01	; 1
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	fc d1       	rcall	.+1016   	; 0x11f0 <memcpy>
     df8:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <RecFlg>
     dfc:	84 e6       	ldi	r24, 0x64	; 100
     dfe:	e7 eb       	ldi	r30, 0xB7	; 183
     e00:	f1 e0       	ldi	r31, 0x01	; 1
			lRecBuffLength = RecBuff_estLength;
			
			// 임시저장 후 또다시 패킷 수신을 위한 버퍼 및 관련변수 초기화
			RecFlg = 0;
     e02:	df 01       	movw	r26, r30
			memset(RecBuff, 0, REC_BUFF_MAX_LENGTH);
     e04:	98 2f       	mov	r25, r24
     e06:	1d 92       	st	X+, r1
     e08:	9a 95       	dec	r25
     e0a:	e9 f7       	brne	.-6      	; 0xe06 <main+0x9a>
     e0c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <RecBuff_estLength>
     e10:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <RecBuffindex>
			RecBuff_estLength = REC_BUFF_MAX_LENGTH;
     e14:	b7 01       	movw	r22, r14
			RecBuffindex = 0;
     e16:	ce 01       	movw	r24, r28
     e18:	01 96       	adiw	r24, 0x01	; 1
			
			// 수신된 패킷을 파싱하는 함수
			res = parsingPacket(lRecBuff,lRecBuffLength);
     e1a:	bf dc       	rcall	.-1666   	; 0x79a <parsingPacket>
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	91 05       	cpc	r25, r1
     e20:	51 f4       	brne	.+20     	; 0xe36 <main+0xca>
			
			if(res == 1){
     e22:	c1 14       	cp	r12, r1
     e24:	d1 04       	cpc	r13, r1
				// motor 동작 완료 시 대기 상태로 전환
				READY = 1;
				
				// if HIGH LED ON, turn off
				if(MAIN_on_off){
     e26:	f9 f0       	breq	.+62     	; 0xe66 <main+0xfa>
     e28:	80 e0       	ldi	r24, 0x00	; 0
					MAIN_on_off = 0;
					HIGH_LED(MAIN_on_off);
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	82 df       	rcall	.-252    	; 0xd32 <HIGH_LED>
     e2e:	c1 2c       	mov	r12, r1
     e30:	d1 2c       	mov	r13, r1
				// motor 동작 완료 시 대기 상태로 전환
				READY = 1;
				
				// if HIGH LED ON, turn off
				if(MAIN_on_off){
					MAIN_on_off = 0;
     e32:	11 e0       	ldi	r17, 0x01	; 1
			// 수신된 패킷을 파싱하는 함수
			res = parsingPacket(lRecBuff,lRecBuffLength);
			
			if(res == 1){
				// motor 동작 완료 시 대기 상태로 전환
				READY = 1;
     e34:	b2 cf       	rjmp	.-156    	; 0xd9a <main+0x2e>
				if(MAIN_on_off){
					MAIN_on_off = 0;
					HIGH_LED(MAIN_on_off);
				}
			}
			else if(res == 2){
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	91 05       	cpc	r25, r1
				READY = 1;
				
				LCD_Clear();
     e3a:	49 f4       	brne	.+18     	; 0xe4e <main+0xe2>
     e3c:	9e d9       	rcall	.-3268   	; 0x17a <LCD_Clear>
				LCD_Pos(0,0);
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	93 d9       	rcall	.-3290   	; 0x16a <LCD_Pos>
     e44:	8e e7       	ldi	r24, 0x7E	; 126
				LCD_Str("START error");
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	84 d9       	rcall	.-3320   	; 0x152 <LCD_Str>
     e4a:	11 e0       	ldi	r17, 0x01	; 1
     e4c:	a6 cf       	rjmp	.-180    	; 0xd9a <main+0x2e>
					MAIN_on_off = 0;
					HIGH_LED(MAIN_on_off);
				}
			}
			else if(res == 2){
				READY = 1;
     e4e:	03 97       	sbiw	r24, 0x03	; 3
     e50:	09 f0       	breq	.+2      	; 0xe54 <main+0xe8>
				
				LCD_Clear();
				LCD_Pos(0,0);
				LCD_Str("START error");
			}
			else if(res == 3){
     e52:	a3 cf       	rjmp	.-186    	; 0xd9a <main+0x2e>
     e54:	92 d9       	rcall	.-3292   	; 0x17a <LCD_Clear>
     e56:	60 e0       	ldi	r22, 0x00	; 0
				READY = 1;
				
				LCD_Clear();
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	87 d9       	rcall	.-3314   	; 0x16a <LCD_Pos>
				LCD_Pos(0,0);
     e5c:	8a e8       	ldi	r24, 0x8A	; 138
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	78 d9       	rcall	.-3344   	; 0x152 <LCD_Str>
     e62:	11 e0       	ldi	r17, 0x01	; 1
				LCD_Str("NAME error");
     e64:	9a cf       	rjmp	.-204    	; 0xd9a <main+0x2e>
     e66:	11 e0       	ldi	r17, 0x01	; 1
     e68:	98 cf       	rjmp	.-208    	; 0xd9a <main+0x2e>

00000e6a <__divsf3>:
     e6a:	0c d0       	rcall	.+24     	; 0xe84 <__divsf3x>
				LCD_Clear();
				LCD_Pos(0,0);
				LCD_Str("START error");
			}
			else if(res == 3){
				READY = 1;
     e6c:	e6 c0       	rjmp	.+460    	; 0x103a <__fp_round>
     e6e:	de d0       	rcall	.+444    	; 0x102c <__fp_pscB>
			// 수신된 패킷을 파싱하는 함수
			res = parsingPacket(lRecBuff,lRecBuffLength);
			
			if(res == 1){
				// motor 동작 완료 시 대기 상태로 전환
				READY = 1;
     e70:	40 f0       	brcs	.+16     	; 0xe82 <__divsf3+0x18>
				LCD_Pos(0,0);
				LCD_Str("NAME error");
			}
			
		}
    }
     e72:	d5 d0       	rcall	.+426    	; 0x101e <__fp_pscA>
     e74:	30 f0       	brcs	.+12     	; 0xe82 <__divsf3+0x18>
     e76:	21 f4       	brne	.+8      	; 0xe80 <__divsf3+0x16>
     e78:	5f 3f       	cpi	r21, 0xFF	; 255
     e7a:	19 f0       	breq	.+6      	; 0xe82 <__divsf3+0x18>
     e7c:	c7 c0       	rjmp	.+398    	; 0x100c <__fp_inf>
     e7e:	51 11       	cpse	r21, r1
     e80:	10 c1       	rjmp	.+544    	; 0x10a2 <__fp_szero>
     e82:	ca c0       	rjmp	.+404    	; 0x1018 <__fp_nan>

00000e84 <__divsf3x>:
     e84:	eb d0       	rcall	.+470    	; 0x105c <__fp_split3>
     e86:	98 f3       	brcs	.-26     	; 0xe6e <__divsf3+0x4>

00000e88 <__divsf3_pse>:
     e88:	99 23       	and	r25, r25
     e8a:	c9 f3       	breq	.-14     	; 0xe7e <__divsf3+0x14>
     e8c:	55 23       	and	r21, r21
     e8e:	b1 f3       	breq	.-20     	; 0xe7c <__divsf3+0x12>
     e90:	95 1b       	sub	r25, r21
     e92:	55 0b       	sbc	r21, r21
     e94:	bb 27       	eor	r27, r27
     e96:	aa 27       	eor	r26, r26
     e98:	62 17       	cp	r22, r18
     e9a:	73 07       	cpc	r23, r19
     e9c:	84 07       	cpc	r24, r20
     e9e:	38 f0       	brcs	.+14     	; 0xeae <__divsf3_pse+0x26>
     ea0:	9f 5f       	subi	r25, 0xFF	; 255
     ea2:	5f 4f       	sbci	r21, 0xFF	; 255
     ea4:	22 0f       	add	r18, r18
     ea6:	33 1f       	adc	r19, r19
     ea8:	44 1f       	adc	r20, r20
     eaa:	aa 1f       	adc	r26, r26
     eac:	a9 f3       	breq	.-22     	; 0xe98 <__divsf3_pse+0x10>
     eae:	33 d0       	rcall	.+102    	; 0xf16 <__divsf3_pse+0x8e>
     eb0:	0e 2e       	mov	r0, r30
     eb2:	3a f0       	brmi	.+14     	; 0xec2 <__divsf3_pse+0x3a>
     eb4:	e0 e8       	ldi	r30, 0x80	; 128
     eb6:	30 d0       	rcall	.+96     	; 0xf18 <__divsf3_pse+0x90>
     eb8:	91 50       	subi	r25, 0x01	; 1
     eba:	50 40       	sbci	r21, 0x00	; 0
     ebc:	e6 95       	lsr	r30
     ebe:	00 1c       	adc	r0, r0
     ec0:	ca f7       	brpl	.-14     	; 0xeb4 <__divsf3_pse+0x2c>
     ec2:	29 d0       	rcall	.+82     	; 0xf16 <__divsf3_pse+0x8e>
     ec4:	fe 2f       	mov	r31, r30
     ec6:	27 d0       	rcall	.+78     	; 0xf16 <__divsf3_pse+0x8e>
     ec8:	66 0f       	add	r22, r22
     eca:	77 1f       	adc	r23, r23
     ecc:	88 1f       	adc	r24, r24
     ece:	bb 1f       	adc	r27, r27
     ed0:	26 17       	cp	r18, r22
     ed2:	37 07       	cpc	r19, r23
     ed4:	48 07       	cpc	r20, r24
     ed6:	ab 07       	cpc	r26, r27
     ed8:	b0 e8       	ldi	r27, 0x80	; 128
     eda:	09 f0       	breq	.+2      	; 0xede <__divsf3_pse+0x56>
     edc:	bb 0b       	sbc	r27, r27
     ede:	80 2d       	mov	r24, r0
     ee0:	bf 01       	movw	r22, r30
     ee2:	ff 27       	eor	r31, r31
     ee4:	93 58       	subi	r25, 0x83	; 131
     ee6:	5f 4f       	sbci	r21, 0xFF	; 255
     ee8:	2a f0       	brmi	.+10     	; 0xef4 <__divsf3_pse+0x6c>
     eea:	9e 3f       	cpi	r25, 0xFE	; 254
     eec:	51 05       	cpc	r21, r1
     eee:	68 f0       	brcs	.+26     	; 0xf0a <__divsf3_pse+0x82>
     ef0:	8d c0       	rjmp	.+282    	; 0x100c <__fp_inf>
     ef2:	d7 c0       	rjmp	.+430    	; 0x10a2 <__fp_szero>
     ef4:	5f 3f       	cpi	r21, 0xFF	; 255
     ef6:	ec f3       	brlt	.-6      	; 0xef2 <__divsf3_pse+0x6a>
     ef8:	98 3e       	cpi	r25, 0xE8	; 232
     efa:	dc f3       	brlt	.-10     	; 0xef2 <__divsf3_pse+0x6a>
     efc:	86 95       	lsr	r24
     efe:	77 95       	ror	r23
     f00:	67 95       	ror	r22
     f02:	b7 95       	ror	r27
     f04:	f7 95       	ror	r31
     f06:	9f 5f       	subi	r25, 0xFF	; 255
     f08:	c9 f7       	brne	.-14     	; 0xefc <__divsf3_pse+0x74>
     f0a:	88 0f       	add	r24, r24
     f0c:	91 1d       	adc	r25, r1
     f0e:	96 95       	lsr	r25
     f10:	87 95       	ror	r24
     f12:	97 f9       	bld	r25, 7
     f14:	08 95       	ret
     f16:	e1 e0       	ldi	r30, 0x01	; 1
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	88 1f       	adc	r24, r24
     f1e:	bb 1f       	adc	r27, r27
     f20:	62 17       	cp	r22, r18
     f22:	73 07       	cpc	r23, r19
     f24:	84 07       	cpc	r24, r20
     f26:	ba 07       	cpc	r27, r26
     f28:	20 f0       	brcs	.+8      	; 0xf32 <__divsf3_pse+0xaa>
     f2a:	62 1b       	sub	r22, r18
     f2c:	73 0b       	sbc	r23, r19
     f2e:	84 0b       	sbc	r24, r20
     f30:	ba 0b       	sbc	r27, r26
     f32:	ee 1f       	adc	r30, r30
     f34:	88 f7       	brcc	.-30     	; 0xf18 <__divsf3_pse+0x90>
     f36:	e0 95       	com	r30
     f38:	08 95       	ret

00000f3a <__fixunssfsi>:
     f3a:	98 d0       	rcall	.+304    	; 0x106c <__fp_splitA>
     f3c:	88 f0       	brcs	.+34     	; 0xf60 <__fixunssfsi+0x26>
     f3e:	9f 57       	subi	r25, 0x7F	; 127
     f40:	90 f0       	brcs	.+36     	; 0xf66 <__fixunssfsi+0x2c>
     f42:	b9 2f       	mov	r27, r25
     f44:	99 27       	eor	r25, r25
     f46:	b7 51       	subi	r27, 0x17	; 23
     f48:	a0 f0       	brcs	.+40     	; 0xf72 <__fixunssfsi+0x38>
     f4a:	d1 f0       	breq	.+52     	; 0xf80 <__fixunssfsi+0x46>
     f4c:	66 0f       	add	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	88 1f       	adc	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	1a f0       	brmi	.+6      	; 0xf5c <__fixunssfsi+0x22>
     f56:	ba 95       	dec	r27
     f58:	c9 f7       	brne	.-14     	; 0xf4c <__fixunssfsi+0x12>
     f5a:	12 c0       	rjmp	.+36     	; 0xf80 <__fixunssfsi+0x46>
     f5c:	b1 30       	cpi	r27, 0x01	; 1
     f5e:	81 f0       	breq	.+32     	; 0xf80 <__fixunssfsi+0x46>
     f60:	9f d0       	rcall	.+318    	; 0x10a0 <__fp_zero>
     f62:	b1 e0       	ldi	r27, 0x01	; 1
     f64:	08 95       	ret
     f66:	9c c0       	rjmp	.+312    	; 0x10a0 <__fp_zero>
     f68:	67 2f       	mov	r22, r23
     f6a:	78 2f       	mov	r23, r24
     f6c:	88 27       	eor	r24, r24
     f6e:	b8 5f       	subi	r27, 0xF8	; 248
     f70:	39 f0       	breq	.+14     	; 0xf80 <__fixunssfsi+0x46>
     f72:	b9 3f       	cpi	r27, 0xF9	; 249
     f74:	cc f3       	brlt	.-14     	; 0xf68 <__fixunssfsi+0x2e>
     f76:	86 95       	lsr	r24
     f78:	77 95       	ror	r23
     f7a:	67 95       	ror	r22
     f7c:	b3 95       	inc	r27
     f7e:	d9 f7       	brne	.-10     	; 0xf76 <__fixunssfsi+0x3c>
     f80:	3e f4       	brtc	.+14     	; 0xf90 <__fixunssfsi+0x56>
     f82:	90 95       	com	r25
     f84:	80 95       	com	r24
     f86:	70 95       	com	r23
     f88:	61 95       	neg	r22
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	8f 4f       	sbci	r24, 0xFF	; 255
     f8e:	9f 4f       	sbci	r25, 0xFF	; 255
     f90:	08 95       	ret

00000f92 <__floatunsisf>:
     f92:	e8 94       	clt
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <__floatsisf+0x12>

00000f96 <__floatsisf>:
     f96:	97 fb       	bst	r25, 7
     f98:	3e f4       	brtc	.+14     	; 0xfa8 <__floatsisf+0x12>
     f9a:	90 95       	com	r25
     f9c:	80 95       	com	r24
     f9e:	70 95       	com	r23
     fa0:	61 95       	neg	r22
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	8f 4f       	sbci	r24, 0xFF	; 255
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	99 23       	and	r25, r25
     faa:	a9 f0       	breq	.+42     	; 0xfd6 <__floatsisf+0x40>
     fac:	f9 2f       	mov	r31, r25
     fae:	96 e9       	ldi	r25, 0x96	; 150
     fb0:	bb 27       	eor	r27, r27
     fb2:	93 95       	inc	r25
     fb4:	f6 95       	lsr	r31
     fb6:	87 95       	ror	r24
     fb8:	77 95       	ror	r23
     fba:	67 95       	ror	r22
     fbc:	b7 95       	ror	r27
     fbe:	f1 11       	cpse	r31, r1
     fc0:	f8 cf       	rjmp	.-16     	; 0xfb2 <__floatsisf+0x1c>
     fc2:	fa f4       	brpl	.+62     	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
     fc4:	bb 0f       	add	r27, r27
     fc6:	11 f4       	brne	.+4      	; 0xfcc <__floatsisf+0x36>
     fc8:	60 ff       	sbrs	r22, 0
     fca:	1b c0       	rjmp	.+54     	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
     fcc:	6f 5f       	subi	r22, 0xFF	; 255
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	8f 4f       	sbci	r24, 0xFF	; 255
     fd2:	9f 4f       	sbci	r25, 0xFF	; 255
     fd4:	16 c0       	rjmp	.+44     	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
     fd6:	88 23       	and	r24, r24
     fd8:	11 f0       	breq	.+4      	; 0xfde <__floatsisf+0x48>
     fda:	96 e9       	ldi	r25, 0x96	; 150
     fdc:	11 c0       	rjmp	.+34     	; 0x1000 <__DATA_REGION_LENGTH__>
     fde:	77 23       	and	r23, r23
     fe0:	21 f0       	breq	.+8      	; 0xfea <__floatsisf+0x54>
     fe2:	9e e8       	ldi	r25, 0x8E	; 142
     fe4:	87 2f       	mov	r24, r23
     fe6:	76 2f       	mov	r23, r22
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <__floatsisf+0x5e>
     fea:	66 23       	and	r22, r22
     fec:	71 f0       	breq	.+28     	; 0x100a <__DATA_REGION_LENGTH__+0xa>
     fee:	96 e8       	ldi	r25, 0x86	; 134
     ff0:	86 2f       	mov	r24, r22
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	2a f0       	brmi	.+10     	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
     ff8:	9a 95       	dec	r25
     ffa:	66 0f       	add	r22, r22
     ffc:	77 1f       	adc	r23, r23
     ffe:	88 1f       	adc	r24, r24
    1000:	da f7       	brpl	.-10     	; 0xff8 <__floatsisf+0x62>
    1002:	88 0f       	add	r24, r24
    1004:	96 95       	lsr	r25
    1006:	87 95       	ror	r24
    1008:	97 f9       	bld	r25, 7
    100a:	08 95       	ret

0000100c <__fp_inf>:
    100c:	97 f9       	bld	r25, 7
    100e:	9f 67       	ori	r25, 0x7F	; 127
    1010:	80 e8       	ldi	r24, 0x80	; 128
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	08 95       	ret

00001018 <__fp_nan>:
    1018:	9f ef       	ldi	r25, 0xFF	; 255
    101a:	80 ec       	ldi	r24, 0xC0	; 192
    101c:	08 95       	ret

0000101e <__fp_pscA>:
    101e:	00 24       	eor	r0, r0
    1020:	0a 94       	dec	r0
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	18 06       	cpc	r1, r24
    1028:	09 06       	cpc	r0, r25
    102a:	08 95       	ret

0000102c <__fp_pscB>:
    102c:	00 24       	eor	r0, r0
    102e:	0a 94       	dec	r0
    1030:	12 16       	cp	r1, r18
    1032:	13 06       	cpc	r1, r19
    1034:	14 06       	cpc	r1, r20
    1036:	05 06       	cpc	r0, r21
    1038:	08 95       	ret

0000103a <__fp_round>:
    103a:	09 2e       	mov	r0, r25
    103c:	03 94       	inc	r0
    103e:	00 0c       	add	r0, r0
    1040:	11 f4       	brne	.+4      	; 0x1046 <__fp_round+0xc>
    1042:	88 23       	and	r24, r24
    1044:	52 f0       	brmi	.+20     	; 0x105a <__fp_round+0x20>
    1046:	bb 0f       	add	r27, r27
    1048:	40 f4       	brcc	.+16     	; 0x105a <__fp_round+0x20>
    104a:	bf 2b       	or	r27, r31
    104c:	11 f4       	brne	.+4      	; 0x1052 <__fp_round+0x18>
    104e:	60 ff       	sbrs	r22, 0
    1050:	04 c0       	rjmp	.+8      	; 0x105a <__fp_round+0x20>
    1052:	6f 5f       	subi	r22, 0xFF	; 255
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	8f 4f       	sbci	r24, 0xFF	; 255
    1058:	9f 4f       	sbci	r25, 0xFF	; 255
    105a:	08 95       	ret

0000105c <__fp_split3>:
    105c:	57 fd       	sbrc	r21, 7
    105e:	90 58       	subi	r25, 0x80	; 128
    1060:	44 0f       	add	r20, r20
    1062:	55 1f       	adc	r21, r21
    1064:	59 f0       	breq	.+22     	; 0x107c <__fp_splitA+0x10>
    1066:	5f 3f       	cpi	r21, 0xFF	; 255
    1068:	71 f0       	breq	.+28     	; 0x1086 <__fp_splitA+0x1a>
    106a:	47 95       	ror	r20

0000106c <__fp_splitA>:
    106c:	88 0f       	add	r24, r24
    106e:	97 fb       	bst	r25, 7
    1070:	99 1f       	adc	r25, r25
    1072:	61 f0       	breq	.+24     	; 0x108c <__fp_splitA+0x20>
    1074:	9f 3f       	cpi	r25, 0xFF	; 255
    1076:	79 f0       	breq	.+30     	; 0x1096 <__fp_splitA+0x2a>
    1078:	87 95       	ror	r24
    107a:	08 95       	ret
    107c:	12 16       	cp	r1, r18
    107e:	13 06       	cpc	r1, r19
    1080:	14 06       	cpc	r1, r20
    1082:	55 1f       	adc	r21, r21
    1084:	f2 cf       	rjmp	.-28     	; 0x106a <__fp_split3+0xe>
    1086:	46 95       	lsr	r20
    1088:	f1 df       	rcall	.-30     	; 0x106c <__fp_splitA>
    108a:	08 c0       	rjmp	.+16     	; 0x109c <__fp_splitA+0x30>
    108c:	16 16       	cp	r1, r22
    108e:	17 06       	cpc	r1, r23
    1090:	18 06       	cpc	r1, r24
    1092:	99 1f       	adc	r25, r25
    1094:	f1 cf       	rjmp	.-30     	; 0x1078 <__fp_splitA+0xc>
    1096:	86 95       	lsr	r24
    1098:	71 05       	cpc	r23, r1
    109a:	61 05       	cpc	r22, r1
    109c:	08 94       	sec
    109e:	08 95       	ret

000010a0 <__fp_zero>:
    10a0:	e8 94       	clt

000010a2 <__fp_szero>:
    10a2:	bb 27       	eor	r27, r27
    10a4:	66 27       	eor	r22, r22
    10a6:	77 27       	eor	r23, r23
    10a8:	cb 01       	movw	r24, r22
    10aa:	97 f9       	bld	r25, 7
    10ac:	08 95       	ret

000010ae <__mulsf3>:
    10ae:	0b d0       	rcall	.+22     	; 0x10c6 <__mulsf3x>
    10b0:	c4 cf       	rjmp	.-120    	; 0x103a <__fp_round>
    10b2:	b5 df       	rcall	.-150    	; 0x101e <__fp_pscA>
    10b4:	28 f0       	brcs	.+10     	; 0x10c0 <__mulsf3+0x12>
    10b6:	ba df       	rcall	.-140    	; 0x102c <__fp_pscB>
    10b8:	18 f0       	brcs	.+6      	; 0x10c0 <__mulsf3+0x12>
    10ba:	95 23       	and	r25, r21
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <__mulsf3+0x12>
    10be:	a6 cf       	rjmp	.-180    	; 0x100c <__fp_inf>
    10c0:	ab cf       	rjmp	.-170    	; 0x1018 <__fp_nan>
    10c2:	11 24       	eor	r1, r1
    10c4:	ee cf       	rjmp	.-36     	; 0x10a2 <__fp_szero>

000010c6 <__mulsf3x>:
    10c6:	ca df       	rcall	.-108    	; 0x105c <__fp_split3>
    10c8:	a0 f3       	brcs	.-24     	; 0x10b2 <__mulsf3+0x4>

000010ca <__mulsf3_pse>:
    10ca:	95 9f       	mul	r25, r21
    10cc:	d1 f3       	breq	.-12     	; 0x10c2 <__mulsf3+0x14>
    10ce:	95 0f       	add	r25, r21
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	55 1f       	adc	r21, r21
    10d4:	62 9f       	mul	r22, r18
    10d6:	f0 01       	movw	r30, r0
    10d8:	72 9f       	mul	r23, r18
    10da:	bb 27       	eor	r27, r27
    10dc:	f0 0d       	add	r31, r0
    10de:	b1 1d       	adc	r27, r1
    10e0:	63 9f       	mul	r22, r19
    10e2:	aa 27       	eor	r26, r26
    10e4:	f0 0d       	add	r31, r0
    10e6:	b1 1d       	adc	r27, r1
    10e8:	aa 1f       	adc	r26, r26
    10ea:	64 9f       	mul	r22, r20
    10ec:	66 27       	eor	r22, r22
    10ee:	b0 0d       	add	r27, r0
    10f0:	a1 1d       	adc	r26, r1
    10f2:	66 1f       	adc	r22, r22
    10f4:	82 9f       	mul	r24, r18
    10f6:	22 27       	eor	r18, r18
    10f8:	b0 0d       	add	r27, r0
    10fa:	a1 1d       	adc	r26, r1
    10fc:	62 1f       	adc	r22, r18
    10fe:	73 9f       	mul	r23, r19
    1100:	b0 0d       	add	r27, r0
    1102:	a1 1d       	adc	r26, r1
    1104:	62 1f       	adc	r22, r18
    1106:	83 9f       	mul	r24, r19
    1108:	a0 0d       	add	r26, r0
    110a:	61 1d       	adc	r22, r1
    110c:	22 1f       	adc	r18, r18
    110e:	74 9f       	mul	r23, r20
    1110:	33 27       	eor	r19, r19
    1112:	a0 0d       	add	r26, r0
    1114:	61 1d       	adc	r22, r1
    1116:	23 1f       	adc	r18, r19
    1118:	84 9f       	mul	r24, r20
    111a:	60 0d       	add	r22, r0
    111c:	21 1d       	adc	r18, r1
    111e:	82 2f       	mov	r24, r18
    1120:	76 2f       	mov	r23, r22
    1122:	6a 2f       	mov	r22, r26
    1124:	11 24       	eor	r1, r1
    1126:	9f 57       	subi	r25, 0x7F	; 127
    1128:	50 40       	sbci	r21, 0x00	; 0
    112a:	8a f0       	brmi	.+34     	; 0x114e <__stack+0x4f>
    112c:	e1 f0       	breq	.+56     	; 0x1166 <__stack+0x67>
    112e:	88 23       	and	r24, r24
    1130:	4a f0       	brmi	.+18     	; 0x1144 <__stack+0x45>
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	bb 1f       	adc	r27, r27
    1138:	66 1f       	adc	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	91 50       	subi	r25, 0x01	; 1
    1140:	50 40       	sbci	r21, 0x00	; 0
    1142:	a9 f7       	brne	.-22     	; 0x112e <__stack+0x2f>
    1144:	9e 3f       	cpi	r25, 0xFE	; 254
    1146:	51 05       	cpc	r21, r1
    1148:	70 f0       	brcs	.+28     	; 0x1166 <__stack+0x67>
    114a:	60 cf       	rjmp	.-320    	; 0x100c <__fp_inf>
    114c:	aa cf       	rjmp	.-172    	; 0x10a2 <__fp_szero>
    114e:	5f 3f       	cpi	r21, 0xFF	; 255
    1150:	ec f3       	brlt	.-6      	; 0x114c <__stack+0x4d>
    1152:	98 3e       	cpi	r25, 0xE8	; 232
    1154:	dc f3       	brlt	.-10     	; 0x114c <__stack+0x4d>
    1156:	86 95       	lsr	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b7 95       	ror	r27
    115e:	f7 95       	ror	r31
    1160:	e7 95       	ror	r30
    1162:	9f 5f       	subi	r25, 0xFF	; 255
    1164:	c1 f7       	brne	.-16     	; 0x1156 <__stack+0x57>
    1166:	fe 2b       	or	r31, r30
    1168:	88 0f       	add	r24, r24
    116a:	91 1d       	adc	r25, r1
    116c:	96 95       	lsr	r25
    116e:	87 95       	ror	r24
    1170:	97 f9       	bld	r25, 7
    1172:	08 95       	ret

00001174 <__divmodsi4>:
    1174:	05 2e       	mov	r0, r21
    1176:	97 fb       	bst	r25, 7
    1178:	16 f4       	brtc	.+4      	; 0x117e <__divmodsi4+0xa>
    117a:	00 94       	com	r0
    117c:	0f d0       	rcall	.+30     	; 0x119c <__negsi2>
    117e:	57 fd       	sbrc	r21, 7
    1180:	05 d0       	rcall	.+10     	; 0x118c <__divmodsi4_neg2>
    1182:	14 d0       	rcall	.+40     	; 0x11ac <__udivmodsi4>
    1184:	07 fc       	sbrc	r0, 7
    1186:	02 d0       	rcall	.+4      	; 0x118c <__divmodsi4_neg2>
    1188:	46 f4       	brtc	.+16     	; 0x119a <__divmodsi4_exit>
    118a:	08 c0       	rjmp	.+16     	; 0x119c <__negsi2>

0000118c <__divmodsi4_neg2>:
    118c:	50 95       	com	r21
    118e:	40 95       	com	r20
    1190:	30 95       	com	r19
    1192:	21 95       	neg	r18
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	4f 4f       	sbci	r20, 0xFF	; 255
    1198:	5f 4f       	sbci	r21, 0xFF	; 255

0000119a <__divmodsi4_exit>:
    119a:	08 95       	ret

0000119c <__negsi2>:
    119c:	90 95       	com	r25
    119e:	80 95       	com	r24
    11a0:	70 95       	com	r23
    11a2:	61 95       	neg	r22
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	8f 4f       	sbci	r24, 0xFF	; 255
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	08 95       	ret

000011ac <__udivmodsi4>:
    11ac:	a1 e2       	ldi	r26, 0x21	; 33
    11ae:	1a 2e       	mov	r1, r26
    11b0:	aa 1b       	sub	r26, r26
    11b2:	bb 1b       	sub	r27, r27
    11b4:	fd 01       	movw	r30, r26
    11b6:	0d c0       	rjmp	.+26     	; 0x11d2 <__udivmodsi4_ep>

000011b8 <__udivmodsi4_loop>:
    11b8:	aa 1f       	adc	r26, r26
    11ba:	bb 1f       	adc	r27, r27
    11bc:	ee 1f       	adc	r30, r30
    11be:	ff 1f       	adc	r31, r31
    11c0:	a2 17       	cp	r26, r18
    11c2:	b3 07       	cpc	r27, r19
    11c4:	e4 07       	cpc	r30, r20
    11c6:	f5 07       	cpc	r31, r21
    11c8:	20 f0       	brcs	.+8      	; 0x11d2 <__udivmodsi4_ep>
    11ca:	a2 1b       	sub	r26, r18
    11cc:	b3 0b       	sbc	r27, r19
    11ce:	e4 0b       	sbc	r30, r20
    11d0:	f5 0b       	sbc	r31, r21

000011d2 <__udivmodsi4_ep>:
    11d2:	66 1f       	adc	r22, r22
    11d4:	77 1f       	adc	r23, r23
    11d6:	88 1f       	adc	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	1a 94       	dec	r1
    11dc:	69 f7       	brne	.-38     	; 0x11b8 <__udivmodsi4_loop>
    11de:	60 95       	com	r22
    11e0:	70 95       	com	r23
    11e2:	80 95       	com	r24
    11e4:	90 95       	com	r25
    11e6:	9b 01       	movw	r18, r22
    11e8:	ac 01       	movw	r20, r24
    11ea:	bd 01       	movw	r22, r26
    11ec:	cf 01       	movw	r24, r30
    11ee:	08 95       	ret

000011f0 <memcpy>:
    11f0:	fb 01       	movw	r30, r22
    11f2:	dc 01       	movw	r26, r24
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <memcpy+0xa>
    11f6:	01 90       	ld	r0, Z+
    11f8:	0d 92       	st	X+, r0
    11fa:	41 50       	subi	r20, 0x01	; 1
    11fc:	50 40       	sbci	r21, 0x00	; 0
    11fe:	d8 f7       	brcc	.-10     	; 0x11f6 <memcpy+0x6>
    1200:	08 95       	ret

00001202 <_exit>:
    1202:	f8 94       	cli

00001204 <__stop_program>:
    1204:	ff cf       	rjmp	.-2      	; 0x1204 <__stop_program>
